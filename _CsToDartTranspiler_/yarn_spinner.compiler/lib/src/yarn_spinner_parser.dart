//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

import 'package:yarn_spinner.compiler.framework/src/yarn_spinner_parser_expression.dart';
import 'package:yarn_spinner.compiler.framework/src/yarn_spinner_parser_listener.dart';
import 'package:yarn_spinner.compiler.framework/src/yarn_spinner_parser_visitor.dart';

// Generated from /Users/desplesda/Work/yarnspinner/YarnSpinner.Compiler/YarnSpinnerParser.g4 by ANTLR 4.8

// Unreachable code detected
// The variable '...' is assigned but its value is never used
// Missing XML comment for publicly visible type or member '...'
// Ambiguous reference in cref attribute

class YarnSpinnerParser extends Parser {
  static List<DFA> decisionToDFA = [];
  static PredictionContextCache sharedContextCache = PredictionContextCache();
  final int INDENT = 1;
  final int DEDENT = 2;
  final int WS = 3;
  final int COMMENT = 4;
  final int NEWLINE = 5;
  final int ID = 6;
  final int BODY_START = 7;
  final int HEADER_DELIMITER = 8;
  final int HASHTAG = 9;
  final int REST_OF_LINE = 10;
  final int BODY_WS = 11;
  final int BODY_END = 12;
  final int SHORTCUT_ARROW = 13;
  final int COMMAND_START = 14;
  final int EXPRESSION_START = 15;
  final int TEXT_ESCAPE = 16;
  final int TEXT_COMMENT = 17;
  final int TEXT = 18;
  final int TEXT_COMMANDHASHTAG_WS = 19;
  final int TEXT_COMMANDHASHTAG_COMMENT = 20;
  final int TEXT_COMMANDHASHTAG_ERROR = 21;
  final int HASHTAG_WS = 22;
  final int HASHTAG_TEXT = 23;
  final int EXPR_WS = 24;
  final int KEYWORD_TRUE = 25;
  final int KEYWORD_FALSE = 26;
  final int KEYWORD_NULL = 27;
  final int OPERATOR_ASSIGNMENT = 28;
  final int OPERATOR_LOGICAL_LESS_THAN_EQUALS = 29;
  final int OPERATOR_LOGICAL_GREATER_THAN_EQUALS = 30;
  final int OPERATOR_LOGICAL_EQUALS = 31;
  final int OPERATOR_LOGICAL_LESS = 32;
  final int OPERATOR_LOGICAL_GREATER = 33;
  final int OPERATOR_LOGICAL_NOT_EQUALS = 34;
  final int OPERATOR_LOGICAL_AND = 35;
  final int OPERATOR_LOGICAL_OR = 36;
  final int OPERATOR_LOGICAL_XOR = 37;
  final int OPERATOR_LOGICAL_NOT = 38;
  final int OPERATOR_MATHS_ADDITION_EQUALS = 39;
  final int OPERATOR_MATHS_SUBTRACTION_EQUALS = 40;
  final int OPERATOR_MATHS_MULTIPLICATION_EQUALS = 41;
  final int OPERATOR_MATHS_MODULUS_EQUALS = 42;
  final int OPERATOR_MATHS_DIVISION_EQUALS = 43;
  final int OPERATOR_MATHS_ADDITION = 44;
  final int OPERATOR_MATHS_SUBTRACTION = 45;
  final int OPERATOR_MATHS_MULTIPLICATION = 46;
  final int OPERATOR_MATHS_DIVISION = 47;
  final int OPERATOR_MATHS_MODULUS = 48;
  final int LPAREN = 49;
  final int RPAREN = 50;
  final int COMMA = 51;
  final int EXPRESSION_AS = 52;
  final int STRING = 53;
  final int FUNC_ID = 54;
  final int EXPRESSION_END = 55;
  final int VAR_ID = 56;
  final int DOT = 57;
  final int NUMBER = 58;
  final int COMMAND_WS = 59;
  final int COMMAND_IF = 60;
  final int COMMAND_ELSEIF = 61;
  final int COMMAND_ELSE = 62;
  final int COMMAND_SET = 63;
  final int COMMAND_ENDIF = 64;
  final int COMMAND_CALL = 65;
  final int COMMAND_DECLARE = 66;
  final int COMMAND_JUMP = 67;
  final int COMMAND_ENUM = 68;
  final int COMMAND_CASE = 69;
  final int COMMAND_ENDENUM = 70;
  final int COMMAND_LOCAL = 71;
  final int COMMAND_END = 72;
  final int COMMAND_TEXT_END = 73;
  final int COMMAND_EXPRESSION_START = 74;
  final int COMMAND_TEXT = 75;
  final int TYPE_STRING = 76;
  final int TYPE_NUMBER = 77;
  final int TYPE_BOOL = 78;
  final int RULE_dialogue = 0;
  final int RULE_file_hashtag = 1;
  final int RULE_node = 2;
  final int RULE_header = 3;
  final int RULE_body = 4;
  final int RULE_statement = 5;
  final int RULE_line_statement = 6;
  final int RULE_line_formatted_text = 7;
  final int RULE_hashtag = 8;
  final int RULE_line_condition = 9;
  final int RULE_expression = 10;
  final int RULE_value = 11;
  final int RULE_variable = 12;
  final int RULE_function_call = 13;
  final int RULE_if_statement = 14;
  final int RULE_if_clause = 15;
  final int RULE_else_if_clause = 16;
  final int RULE_else_clause = 17;
  final int RULE_set_statement = 18;
  final int RULE_call_statement = 19;
  final int RULE_command_statement = 20;
  final int RULE_command_formatted_text = 21;
  final int RULE_shortcut_option_statement = 22;
  final int RULE_shortcut_option = 23;
  final int RULE_declare_statement = 24;
  final int RULE_jump_statement = 25;
  static final List<String> ruleNames = ["dialogue", "file_hashtag", "node", "header", "body", "statement", "line_statement", "line_formatted_text", "hashtag", "line_condition", "expression", "value", "variable", "function_call", "if_statement", "if_clause", "else_if_clause", "else_clause", "set_statement", "call_statement", "command_statement", "command_formatted_text", "shortcut_option_statement", "shortcut_option", "declare_statement", "jump_statement"];

  static final List<String> _LiteralNames = [null, null, null, null, null, null, null, "'---'", null, "'#'", null, null, "'==='", "'->'", "'<<'", null, "'\\'", null, null, null, null, null, null, null, null, "'true'", "'false'", "'null'", null, null, null, null, null, null, null, null, null, null, null, "'+='", "'-='", "'*='", "'%='", "'/='", "'+'", "'-'", "'*'", "'/'", "'%'", "'('", "')'", "','", "'as'", null, null, "'}'", null, "'.'", null, null, null, null, null, null, "'endif'", null, null, null, null, null, null, null, null, null, "'{'", null, "'string'", "'number'", "'bool'"];
  static final List<String> _SymbolicNames = [null, "INDENT", "DEDENT", "WS", "COMMENT", "NEWLINE", "ID", "BODY_START", "HEADER_DELIMITER", "HASHTAG", "REST_OF_LINE", "BODY_WS", "BODY_END", "SHORTCUT_ARROW", "COMMAND_START", "EXPRESSION_START", "TEXT_ESCAPE", "TEXT_COMMENT", "TEXT", "TEXT_COMMANDHASHTAG_WS", "TEXT_COMMANDHASHTAG_COMMENT", "TEXT_COMMANDHASHTAG_ERROR", "HASHTAG_WS", "HASHTAG_TEXT", "EXPR_WS", "KEYWORD_TRUE", "KEYWORD_FALSE", "KEYWORD_NULL", "OPERATOR_ASSIGNMENT", "OPERATOR_LOGICAL_LESS_THAN_EQUALS", "OPERATOR_LOGICAL_GREATER_THAN_EQUALS", "OPERATOR_LOGICAL_EQUALS", "OPERATOR_LOGICAL_LESS", "OPERATOR_LOGICAL_GREATER", "OPERATOR_LOGICAL_NOT_EQUALS", "OPERATOR_LOGICAL_AND", "OPERATOR_LOGICAL_OR", "OPERATOR_LOGICAL_XOR", "OPERATOR_LOGICAL_NOT", "OPERATOR_MATHS_ADDITION_EQUALS", "OPERATOR_MATHS_SUBTRACTION_EQUALS", "OPERATOR_MATHS_MULTIPLICATION_EQUALS", "OPERATOR_MATHS_MODULUS_EQUALS", "OPERATOR_MATHS_DIVISION_EQUALS", "OPERATOR_MATHS_ADDITION", "OPERATOR_MATHS_SUBTRACTION", "OPERATOR_MATHS_MULTIPLICATION", "OPERATOR_MATHS_DIVISION", "OPERATOR_MATHS_MODULUS", "LPAREN", "RPAREN", "COMMA", "EXPRESSION_AS", "STRING", "FUNC_ID", "EXPRESSION_END", "VAR_ID", "DOT", "NUMBER", "COMMAND_WS", "COMMAND_IF", "COMMAND_ELSEIF", "COMMAND_ELSE", "COMMAND_SET", "COMMAND_ENDIF", "COMMAND_CALL", "COMMAND_DECLARE", "COMMAND_JUMP", "COMMAND_ENUM", "COMMAND_CASE", "COMMAND_ENDENUM", "COMMAND_LOCAL", "COMMAND_END", "COMMAND_TEXT_END", "COMMAND_EXPRESSION_START", "COMMAND_TEXT", "TYPE_STRING", "TYPE_NUMBER", "TYPE_BOOL"];
  static final IVocabulary DefaultVocabulary = Vocabulary(_LiteralNames, _SymbolicNames);

  IVocabulary get vocabulary {
    return defaultVocabulary;
  }


  String get grammarFileName {
    return "YarnSpinnerParser.g4";
  }


  List<String> get ruleNames {
    return ruleNames;
  }


  String get serializedAtn {
    return String(_serializedATN);
  }


  YarnSpinnerParser() {
    decisionToDFA = List<DFA>();
    for (int i = 0; i < ATN.NumberOfDecisions; i++) {
      decisionToDFA[i] = DFA(ATN.getDecisionState(i), i);
    }
  }

  YarnSpinnerParser(ITokenStream input) {
  }

  YarnSpinnerParser(ITokenStream input, TextWriter output, TextWriter errorOutput) {
    Interpreter = ParserATNSimulator(this, ATN, decisionToDFA, sharedContextCache);
  }


  DialogueContext dialogue() {
    DialogueContext _localctx = DialogueContext(Context, State);
    EnterRule(localctx, 0, rULE_dialogue);
    int _la = 0;
    try {
      EnterOuterAlt(localctx, 1);
 {
 {
          State = 55;
          ErrorHandler.sync(this);
          la = TokenStream.lA(1);
          while (la == hASHTAG) {
 {
 {
                State = 52;
                file_hashtag();
              }
            }
            State = 57;
            ErrorHandler.sync(this);
            la = TokenStream.lA(1);
          }
        }
        State = 59;
        ErrorHandler.sync(this);
        la = TokenStream.lA(1);
        do  {
 {
 {
              State = 58;
              node();
            }
          }
          State = 61;
          ErrorHandler.sync(this);
          la = TokenStream.lA(1);
        }
        while (la == iD);
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  File_hashtagContext file_hashtag() {
    File_hashtagContext _localctx = File_hashtagContext(Context, State);
    EnterRule(localctx, 2, rULE_file_hashtag);
    try {
      EnterOuterAlt(localctx, 1);
 {
        State = 63;
        Match(hASHTAG);
        State = 64;
        localctx.text = Match(hASHTAG_TEXT);
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  NodeContext node() {
    NodeContext _localctx = NodeContext(Context, State);
    EnterRule(localctx, 4, rULE_node);
    int _la = 0;
    try {
      EnterOuterAlt(localctx, 1);
 {
        State = 67;
        ErrorHandler.sync(this);
        la = TokenStream.lA(1);
        do  {
 {
 {
              State = 66;
              header();
            }
          }
          State = 69;
          ErrorHandler.sync(this);
          la = TokenStream.lA(1);
        }
        while (la == iD);
        State = 71;
        Match(bODY_START);
        State = 72;
        body();
        State = 73;
        Match(bODY_END);
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  HeaderContext header() {
    HeaderContext _localctx = HeaderContext(Context, State);
    EnterRule(localctx, 6, rULE_header);
    int _la = 0;
    try {
      EnterOuterAlt(localctx, 1);
 {
        State = 75;
        localctx.header_key = Match(iD);
        State = 76;
        Match(hEADER_DELIMITER);
        State = 78;
        ErrorHandler.sync(this);
        la = TokenStream.lA(1);
        if (la == rEST_OF_LINE) {
 {
            State = 77;
            localctx.header_value = Match(rEST_OF_LINE);
          }
        }

      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  BodyContext body() {
    BodyContext _localctx = BodyContext(Context, State);
    EnterRule(localctx, 8, rULE_body);
    int _la = 0;
    try {
      EnterOuterAlt(localctx, 1);
 {
        State = 83;
        ErrorHandler.sync(this);
        la = TokenStream.lA(1);
        while ((((la) & ~63) == 0 && ((1 << la) & ((1 << iNDENT) | (1 << sHORTCUT_ARROW) | (1 << cOMMAND_START) | (1 << eXPRESSION_START) | (1 << tEXT))) != 0)) {
 {
 {
              State = 80;
              statement();
            }
          }
          State = 85;
          ErrorHandler.sync(this);
          la = TokenStream.lA(1);
        }
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  StatementContext statement() {
    StatementContext _localctx = StatementContext(Context, State);
    EnterRule(localctx, 10, rULE_statement);
    int _la = 0;
    try {
      State = 102;
      ErrorHandler.sync(this);
      switch (Interpreter.AdaptivePredict(TokenStream,6,Context)) {
        case 1: {
          EnterOuterAlt(localctx, 1);
 {
            State = 86;
            line_statement();
          }
        }
        case 2: {
          EnterOuterAlt(localctx, 2);
 {
            State = 87;
            if_statement();
          }
        }
        case 3: {
          EnterOuterAlt(localctx, 3);
 {
            State = 88;
            set_statement();
          }
        }
        case 4: {
          EnterOuterAlt(localctx, 4);
 {
            State = 89;
            shortcut_option_statement();
          }
        }
        case 5: {
          EnterOuterAlt(localctx, 5);
 {
            State = 90;
            call_statement();
          }
        }
        case 6: {
          EnterOuterAlt(localctx, 6);
 {
            State = 91;
            command_statement();
          }
        }
        case 7: {
          EnterOuterAlt(localctx, 7);
 {
            State = 92;
            declare_statement();
          }
        }
        case 8: {
          EnterOuterAlt(localctx, 8);
 {
            State = 93;
            jump_statement();
          }
        }
        case 9: {
          EnterOuterAlt(localctx, 9);
 {
            State = 94;
            Match(iNDENT);
            State = 98;
            ErrorHandler.sync(this);
            la = TokenStream.lA(1);
            while ((((la) & ~63) == 0 && ((1 << la) & ((1 << iNDENT) | (1 << sHORTCUT_ARROW) | (1 << cOMMAND_START) | (1 << eXPRESSION_START) | (1 << tEXT))) != 0)) {
 {
 {
                  State = 95;
                  statement();
                }
              }
              State = 100;
              ErrorHandler.sync(this);
              la = TokenStream.lA(1);
            }
            State = 101;
            Match(dEDENT);
          }
        }
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  Line_statementContext line_statement() {
    Line_statementContext _localctx = Line_statementContext(Context, State);
    EnterRule(localctx, 12, rULE_line_statement);
    int _la = 0;
    try {
      EnterOuterAlt(localctx, 1);
 {
        State = 104;
        line_formatted_text();
        State = 106;
        ErrorHandler.sync(this);
        la = TokenStream.lA(1);
        if (la == cOMMAND_START) {
 {
            State = 105;
            line_condition();
          }
        }


        State = 111;
        ErrorHandler.sync(this);
        la = TokenStream.lA(1);
        while (la == hASHTAG) {
 {
 {
              State = 108;
              hashtag();
            }
          }
          State = 113;
          ErrorHandler.sync(this);
          la = TokenStream.lA(1);
        }
        State = 114;
        Match(nEWLINE);
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  Line_formatted_textContext line_formatted_text() {
    Line_formatted_textContext _localctx = Line_formatted_textContext(Context, State);
    EnterRule(localctx, 14, rULE_line_formatted_text);
    int _la = 0;
    try {
      int _alt = 0;
      EnterOuterAlt(localctx, 1);
 {
        State = 125;
        ErrorHandler.sync(this);
        la = TokenStream.lA(1);
        do  {
 {
            State = 125;
            ErrorHandler.sync(this);
            switch (TokenStream.LA(1)) {
              case tEXT: {
 {
                  State = 117;
                  ErrorHandler.sync(this);
                  alt = 1;
                  do  {
                    switch (_alt) {
                      case 1: {
 {
 {
                            State = 116;
                            Match(tEXT);
                          }
                        }
                      }
                      default: {
                        throw NoViableAltException(this);
                      }
                    }
                    State = 119;
                    ErrorHandler.sync(this);
                    alt = Interpreter.adaptivePredict(TokenStream, 9, Context);
                  }
                  while (alt != 2 && alt != globalAntlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
                }
              }
              case eXPRESSION_START: {
 {
                  State = 121;
                  Match(eXPRESSION_START);
                  State = 122;
                  _expression17(0);
                  State = 123;
                  Match(eXPRESSION_END);
                }
              }
              default: {
                throw NoViableAltException(this);
              }
            }
          }
          State = 127;
          ErrorHandler.sync(this);
          la = TokenStream.lA(1);
        }
        while (la == eXPRESSION_START || la == tEXT);
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  HashtagContext hashtag() {
    HashtagContext _localctx = HashtagContext(Context, State);
    EnterRule(localctx, 16, rULE_hashtag);
    try {
      EnterOuterAlt(localctx, 1);
 {
        State = 129;
        Match(hASHTAG);
        State = 130;
        localctx.text = Match(hASHTAG_TEXT);
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  Line_conditionContext line_condition() {
    Line_conditionContext _localctx = Line_conditionContext(Context, State);
    EnterRule(localctx, 18, rULE_line_condition);
    try {
      EnterOuterAlt(localctx, 1);
 {
        State = 132;
        Match(cOMMAND_START);
        State = 133;
        Match(cOMMAND_IF);
        State = 134;
        _expression17(0);
        State = 135;
        Match(cOMMAND_END);
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  ExpressionContext expression() {
    return _expression17(0);
  }

  ExpressionContext _expression17(int _p) {
    ParserRuleContext _parentctx = Context;
    int _parentState = State;
    ExpressionContext _localctx = ExpressionContext(Context, parentState);
    ExpressionContext _prevctx = localctx;
    int _startState = 20;
    EnterRecursionRule(localctx, 20, rULE_expression, p);
    int _la = 0;
    try {
      int _alt = 0;
      EnterOuterAlt(localctx, 1);
 {
        State = 147;
        ErrorHandler.sync(this);
        switch (TokenStream.LA(1)) {
          case lPAREN: {
 {
              localctx = ExpParensContext(localctx);
              Context = localctx;
              prevctx = localctx;

              State = 138;
              Match(lPAREN);
              State = 139;
              _expression17(0);
              State = 140;
              Match(rPAREN);
            }
          }
          case oPERATOR_MATHS_SUBTRACTION: {
 {
              localctx = ExpNegativeContext(localctx);
              Context = localctx;
              prevctx = localctx;
              State = 142;
              (localctx as ExpNegativeContext).op = Match(oPERATOR_MATHS_SUBTRACTION);
              State = 143;
              _expression17(8);
            }
          }
          case oPERATOR_LOGICAL_NOT: {
 {
              localctx = ExpNotContext(localctx);
              Context = localctx;
              prevctx = localctx;
              State = 144;
              (localctx as ExpNotContext).op = Match(oPERATOR_LOGICAL_NOT);
              State = 145;
              _expression17(7);
            }
          }
          case kEYWORD_TRUE, kEYWORD_FALSE, kEYWORD_NULL, sTRING, fUNC_ID, vAR_ID, nUMBER: {
 {
              localctx = ExpValueContext(localctx);
              Context = localctx;
              prevctx = localctx;
              State = 146;
              value();
            }
          }
          default: {
            throw NoViableAltException(this);
          }
        }
        Context.Stop = TokenStream.lT(-1);
        State = 166;
        ErrorHandler.sync(this);
        alt = Interpreter.adaptivePredict(TokenStream, 14, Context);
        while (alt != 2 && alt != globalAntlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER) {
          if (alt == 1) {
            if (ParseListeners != null) {
              TriggerExitRuleEvent();
            }

            prevctx = localctx;
 {
              State = 164;
              ErrorHandler.sync(this);
              switch (Interpreter.AdaptivePredict(TokenStream,13,Context)) {
                case 1: {
 {
                    localctx = ExpMultDivModContext(ExpressionContext(parentctx, parentState));
                    PushNewRecursionContext(localctx, startState, rULE_expression);
                    State = 149;
                    if (!(Precpred(Context, 6))) {
                      throw FailedPredicateException(this, "Precpred(Context, 6)");
                    }

                    State = 150;
                    (localctx as ExpMultDivModContext).op = TokenStream.lT(1);
                    la = TokenStream.lA(1);
                    if (!((((la) & ~63) == 0 && ((1 << la) & ((1 << oPERATOR_MATHS_MULTIPLICATION) | (1 << oPERATOR_MATHS_DIVISION) | (1 << oPERATOR_MATHS_MODULUS))) != 0))) {
                      (localctx as ExpMultDivModContext).op = ErrorHandler.recoverInline(this);
                    }
                    else {
                      ErrorHandler.reportMatch(this);
                      Consume();
                    }
                    State = 151;
                    _expression17(7);
                  }
                }
                case 2: {
 {
                    localctx = ExpAddSubContext(ExpressionContext(parentctx, parentState));
                    PushNewRecursionContext(localctx, startState, rULE_expression);
                    State = 152;
                    if (!(Precpred(Context, 5))) {
                      throw FailedPredicateException(this, "Precpred(Context, 5)");
                    }

                    State = 153;
                    (localctx as ExpAddSubContext).op = TokenStream.lT(1);
                    la = TokenStream.lA(1);
                    if (!(la == oPERATOR_MATHS_ADDITION || la == oPERATOR_MATHS_SUBTRACTION)) {
                      (localctx as ExpAddSubContext).op = ErrorHandler.recoverInline(this);
                    }
                    else {
                      ErrorHandler.reportMatch(this);
                      Consume();
                    }
                    State = 154;
                    _expression17(6);
                  }
                }
                case 3: {
 {
                    localctx = ExpComparisonContext(ExpressionContext(parentctx, parentState));
                    PushNewRecursionContext(localctx, startState, rULE_expression);
                    State = 155;
                    if (!(Precpred(Context, 4))) {
                      throw FailedPredicateException(this, "Precpred(Context, 4)");
                    }

                    State = 156;
                    (localctx as ExpComparisonContext).op = TokenStream.lT(1);
                    la = TokenStream.lA(1);
                    if (!((((la) & ~63) == 0 && ((1 << la) & ((1 << oPERATOR_LOGICAL_LESS_THAN_EQUALS) | (1 << oPERATOR_LOGICAL_GREATER_THAN_EQUALS) | (1 << oPERATOR_LOGICAL_LESS) | (1 << oPERATOR_LOGICAL_GREATER))) != 0))) {
                      (localctx as ExpComparisonContext).op = ErrorHandler.recoverInline(this);
                    }
                    else {
                      ErrorHandler.reportMatch(this);
                      Consume();
                    }
                    State = 157;
                    _expression17(5);
                  }
                }
                case 4: {
 {
                    localctx = ExpEqualityContext(ExpressionContext(parentctx, parentState));
                    PushNewRecursionContext(localctx, startState, rULE_expression);
                    State = 158;
                    if (!(Precpred(Context, 3))) {
                      throw FailedPredicateException(this, "Precpred(Context, 3)");
                    }

                    State = 159;
                    (localctx as ExpEqualityContext).op = TokenStream.lT(1);
                    la = TokenStream.lA(1);
                    if (!(la == oPERATOR_LOGICAL_EQUALS || la == oPERATOR_LOGICAL_NOT_EQUALS)) {
                      (localctx as ExpEqualityContext).op = ErrorHandler.recoverInline(this);
                    }
                    else {
                      ErrorHandler.reportMatch(this);
                      Consume();
                    }
                    State = 160;
                    _expression17(4);
                  }
                }
                case 5: {
 {
                    localctx = ExpAndOrXorContext(ExpressionContext(parentctx, parentState));
                    PushNewRecursionContext(localctx, startState, rULE_expression);
                    State = 161;
                    if (!(Precpred(Context, 2))) {
                      throw FailedPredicateException(this, "Precpred(Context, 2)");
                    }

                    State = 162;
                    (localctx as ExpAndOrXorContext).op = TokenStream.lT(1);
                    la = TokenStream.lA(1);
                    if (!((((la) & ~63) == 0 && ((1 << la) & ((1 << oPERATOR_LOGICAL_AND) | (1 << oPERATOR_LOGICAL_OR) | (1 << oPERATOR_LOGICAL_XOR))) != 0))) {
                      (localctx as ExpAndOrXorContext).op = ErrorHandler.recoverInline(this);
                    }
                    else {
                      ErrorHandler.reportMatch(this);
                      Consume();
                    }
                    State = 163;
                    _expression17(3);
                  }
                }
              }
            }
          }

          State = 168;
          ErrorHandler.sync(this);
          alt = Interpreter.adaptivePredict(TokenStream, 14, Context);
        }
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      UnrollRecursionContexts(parentctx);
    }
    return localctx;
  }


  ValueContext value() {
    ValueContext _localctx = ValueContext(Context, State);
    EnterRule(localctx, 22, rULE_value);
    try {
      State = 176;
      ErrorHandler.sync(this);
      switch (TokenStream.LA(1)) {
        case nUMBER: {
          localctx = ValueNumberContext(localctx);
          EnterOuterAlt(localctx, 1);
 {
            State = 169;
            Match(nUMBER);
          }
        }
        case kEYWORD_TRUE: {
          localctx = ValueTrueContext(localctx);
          EnterOuterAlt(localctx, 2);
 {
            State = 170;
            Match(kEYWORD_TRUE);
          }
        }
        case kEYWORD_FALSE: {
          localctx = ValueFalseContext(localctx);
          EnterOuterAlt(localctx, 3);
 {
            State = 171;
            Match(kEYWORD_FALSE);
          }
        }
        case vAR_ID: {
          localctx = ValueVarContext(localctx);
          EnterOuterAlt(localctx, 4);
 {
            State = 172;
            variable();
          }
        }
        case sTRING: {
          localctx = ValueStringContext(localctx);
          EnterOuterAlt(localctx, 5);
 {
            State = 173;
            Match(sTRING);
          }
        }
        case kEYWORD_NULL: {
          localctx = ValueNullContext(localctx);
          EnterOuterAlt(localctx, 6);
 {
            State = 174;
            Match(kEYWORD_NULL);
          }
        }
        case fUNC_ID: {
          localctx = ValueFuncContext(localctx);
          EnterOuterAlt(localctx, 7);
 {
            State = 175;
            function_call();
          }
        }
        default: {
          throw NoViableAltException(this);
        }
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  VariableContext variable() {
    VariableContext _localctx = VariableContext(Context, State);
    EnterRule(localctx, 24, rULE_variable);
    try {
      EnterOuterAlt(localctx, 1);
 {
        State = 178;
        Match(vAR_ID);
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  Function_callContext function_call() {
    Function_callContext _localctx = Function_callContext(Context, State);
    EnterRule(localctx, 26, rULE_function_call);
    int _la = 0;
    try {
      EnterOuterAlt(localctx, 1);
 {
        State = 180;
        Match(fUNC_ID);
        State = 181;
        Match(lPAREN);
        State = 183;
        ErrorHandler.sync(this);
        la = TokenStream.lA(1);
        if ((((la) & ~63) == 0 && ((1 << la) & ((1 << kEYWORD_TRUE) | (1 << kEYWORD_FALSE) | (1 << kEYWORD_NULL) | (1 << oPERATOR_LOGICAL_NOT) | (1 << oPERATOR_MATHS_SUBTRACTION) | (1 << lPAREN) | (1 << sTRING) | (1 << fUNC_ID) | (1 << vAR_ID) | (1 << nUMBER))) != 0)) {
 {
            State = 182;
            _expression17(0);
          }
        }


        State = 189;
        ErrorHandler.sync(this);
        la = TokenStream.lA(1);
        while (la == cOMMA) {
 {
 {
              State = 185;
              Match(cOMMA);
              State = 186;
              _expression17(0);
            }
          }
          State = 191;
          ErrorHandler.sync(this);
          la = TokenStream.lA(1);
        }
        State = 192;
        Match(rPAREN);
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  If_statementContext if_statement() {
    If_statementContext _localctx = If_statementContext(Context, State);
    EnterRule(localctx, 28, rULE_if_statement);
    try {
      int _alt = 0;
      EnterOuterAlt(localctx, 1);
 {
        State = 194;
        if_clause();
        State = 198;
        ErrorHandler.sync(this);
        alt = Interpreter.adaptivePredict(TokenStream, 18, Context);
        while (alt != 2 && alt != globalAntlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER) {
          if (alt == 1) {
 {
 {
                State = 195;
                else_if_clause();
              }
            }
          }

          State = 200;
          ErrorHandler.sync(this);
          alt = Interpreter.adaptivePredict(TokenStream, 18, Context);
        }
        State = 202;
        ErrorHandler.sync(this);
        switch (Interpreter.AdaptivePredict(TokenStream,19,Context)) {
          case 1: {
 {
              State = 201;
              else_clause();
            }
          }
        }
        State = 204;
        Match(cOMMAND_START);
        State = 205;
        Match(cOMMAND_ENDIF);
        State = 206;
        Match(cOMMAND_END);
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  If_clauseContext if_clause() {
    If_clauseContext _localctx = If_clauseContext(Context, State);
    EnterRule(localctx, 30, rULE_if_clause);
    try {
      int _alt = 0;
      EnterOuterAlt(localctx, 1);
 {
        State = 208;
        Match(cOMMAND_START);
        State = 209;
        Match(cOMMAND_IF);
        State = 210;
        _expression17(0);
        State = 211;
        Match(cOMMAND_END);
        State = 215;
        ErrorHandler.sync(this);
        alt = Interpreter.adaptivePredict(TokenStream, 20, Context);
        while (alt != 2 && alt != globalAntlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER) {
          if (alt == 1) {
 {
 {
                State = 212;
                statement();
              }
            }
          }

          State = 217;
          ErrorHandler.sync(this);
          alt = Interpreter.adaptivePredict(TokenStream, 20, Context);
        }
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  Else_if_clauseContext else_if_clause() {
    Else_if_clauseContext _localctx = Else_if_clauseContext(Context, State);
    EnterRule(localctx, 32, rULE_else_if_clause);
    try {
      int _alt = 0;
      EnterOuterAlt(localctx, 1);
 {
        State = 218;
        Match(cOMMAND_START);
        State = 219;
        Match(cOMMAND_ELSEIF);
        State = 220;
        _expression17(0);
        State = 221;
        Match(cOMMAND_END);
        State = 225;
        ErrorHandler.sync(this);
        alt = Interpreter.adaptivePredict(TokenStream, 21, Context);
        while (alt != 2 && alt != globalAntlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER) {
          if (alt == 1) {
 {
 {
                State = 222;
                statement();
              }
            }
          }

          State = 227;
          ErrorHandler.sync(this);
          alt = Interpreter.adaptivePredict(TokenStream, 21, Context);
        }
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  Else_clauseContext else_clause() {
    Else_clauseContext _localctx = Else_clauseContext(Context, State);
    EnterRule(localctx, 34, rULE_else_clause);
    try {
      int _alt = 0;
      EnterOuterAlt(localctx, 1);
 {
        State = 228;
        Match(cOMMAND_START);
        State = 229;
        Match(cOMMAND_ELSE);
        State = 230;
        Match(cOMMAND_END);
        State = 234;
        ErrorHandler.sync(this);
        alt = Interpreter.adaptivePredict(TokenStream, 22, Context);
        while (alt != 2 && alt != globalAntlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER) {
          if (alt == 1) {
 {
 {
                State = 231;
                statement();
              }
            }
          }

          State = 236;
          ErrorHandler.sync(this);
          alt = Interpreter.adaptivePredict(TokenStream, 22, Context);
        }
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  Set_statementContext set_statement() {
    Set_statementContext _localctx = Set_statementContext(Context, State);
    EnterRule(localctx, 36, rULE_set_statement);
    int _la = 0;
    try {
      EnterOuterAlt(localctx, 1);
 {
        State = 237;
        Match(cOMMAND_START);
        State = 238;
        Match(cOMMAND_SET);
        State = 239;
        variable();
        State = 240;
        localctx.op = TokenStream.lT(1);
        la = TokenStream.lA(1);
        if (!((((la) & ~63) == 0 && ((1 << la) & ((1 << oPERATOR_ASSIGNMENT) | (1 << oPERATOR_MATHS_ADDITION_EQUALS) | (1 << oPERATOR_MATHS_SUBTRACTION_EQUALS) | (1 << oPERATOR_MATHS_MULTIPLICATION_EQUALS) | (1 << oPERATOR_MATHS_MODULUS_EQUALS) | (1 << oPERATOR_MATHS_DIVISION_EQUALS))) != 0))) {
          localctx.op = ErrorHandler.recoverInline(this);
        }
        else {
          ErrorHandler.reportMatch(this);
          Consume();
        }
        State = 241;
        _expression17(0);
        State = 242;
        Match(cOMMAND_END);
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  Call_statementContext call_statement() {
    Call_statementContext _localctx = Call_statementContext(Context, State);
    EnterRule(localctx, 38, rULE_call_statement);
    try {
      EnterOuterAlt(localctx, 1);
 {
        State = 244;
        Match(cOMMAND_START);
        State = 245;
        Match(cOMMAND_CALL);
        State = 246;
        function_call();
        State = 247;
        Match(cOMMAND_END);
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  Command_statementContext command_statement() {
    Command_statementContext _localctx = Command_statementContext(Context, State);
    EnterRule(localctx, 40, rULE_command_statement);
    int _la = 0;
    try {
      EnterOuterAlt(localctx, 1);
 {
        State = 249;
        Match(cOMMAND_START);
        State = 250;
        command_formatted_text();
        State = 251;
        Match(cOMMAND_TEXT_END);
 {
          State = 255;
          ErrorHandler.sync(this);
          la = TokenStream.lA(1);
          while (la == hASHTAG) {
 {
 {
                State = 252;
                hashtag();
              }
            }
            State = 257;
            ErrorHandler.sync(this);
            la = TokenStream.lA(1);
          }
        }
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  Command_formatted_textContext command_formatted_text() {
    Command_formatted_textContext _localctx = Command_formatted_textContext(Context, State);
    EnterRule(localctx, 42, rULE_command_formatted_text);
    int _la = 0;
    try {
      EnterOuterAlt(localctx, 1);
 {
        State = 265;
        ErrorHandler.sync(this);
        la = TokenStream.lA(1);
        while (la == cOMMAND_EXPRESSION_START || la == cOMMAND_TEXT) {
 {
            State = 263;
            ErrorHandler.sync(this);
            switch (TokenStream.LA(1)) {
              case cOMMAND_TEXT: {
 {
                  State = 258;
                  Match(cOMMAND_TEXT);
                }
              }
              case cOMMAND_EXPRESSION_START: {
 {
                  State = 259;
                  Match(cOMMAND_EXPRESSION_START);
                  State = 260;
                  _expression17(0);
                  State = 261;
                  Match(eXPRESSION_END);
                }
              }
              default: {
                throw NoViableAltException(this);
              }
            }
          }
          State = 267;
          ErrorHandler.sync(this);
          la = TokenStream.lA(1);
        }
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  Shortcut_option_statementContext shortcut_option_statement() {
    Shortcut_option_statementContext _localctx = Shortcut_option_statementContext(Context, State);
    EnterRule(localctx, 44, rULE_shortcut_option_statement);
    try {
      int _alt = 0;
      EnterOuterAlt(localctx, 1);
 {
        State = 269;
        ErrorHandler.sync(this);
        alt = 1;
        do  {
          switch (_alt) {
            case 1: {
 {
 {
                  State = 268;
                  shortcut_option();
                }
              }
            }
            default: {
              throw NoViableAltException(this);
            }
          }
          State = 271;
          ErrorHandler.sync(this);
          alt = Interpreter.adaptivePredict(TokenStream, 26, Context);
        }
        while (alt != 2 && alt != globalAntlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  Shortcut_optionContext shortcut_option() {
    Shortcut_optionContext _localctx = Shortcut_optionContext(Context, State);
    EnterRule(localctx, 46, rULE_shortcut_option);
    int _la = 0;
    try {
      EnterOuterAlt(localctx, 1);
 {
        State = 273;
        Match(sHORTCUT_ARROW);
        State = 274;
        line_statement();
        State = 283;
        ErrorHandler.sync(this);
        switch (Interpreter.AdaptivePredict(TokenStream,28,Context)) {
          case 1: {
 {
              State = 275;
              Match(iNDENT);
              State = 279;
              ErrorHandler.sync(this);
              la = TokenStream.lA(1);
              while ((((la) & ~63) == 0 && ((1 << la) & ((1 << iNDENT) | (1 << sHORTCUT_ARROW) | (1 << cOMMAND_START) | (1 << eXPRESSION_START) | (1 << tEXT))) != 0)) {
 {
 {
                    State = 276;
                    statement();
                  }
                }
                State = 281;
                ErrorHandler.sync(this);
                la = TokenStream.lA(1);
              }
              State = 282;
              Match(dEDENT);
            }
          }
        }
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  Declare_statementContext declare_statement() {
    Declare_statementContext _localctx = Declare_statementContext(Context, State);
    EnterRule(localctx, 48, rULE_declare_statement);
    int _la = 0;
    try {
      EnterOuterAlt(localctx, 1);
 {
        State = 285;
        Match(cOMMAND_START);
        State = 286;
        Match(cOMMAND_DECLARE);
        State = 287;
        variable();
        State = 288;
        Match(oPERATOR_ASSIGNMENT);
        State = 289;
        value();
        State = 292;
        ErrorHandler.sync(this);
        la = TokenStream.lA(1);
        if (la == eXPRESSION_AS) {
 {
            State = 290;
            Match(eXPRESSION_AS);
            State = 291;
            localctx.type = Match(fUNC_ID);
          }
        }


        State = 294;
        Match(cOMMAND_END);
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }


  Jump_statementContext jump_statement() {
    Jump_statementContext _localctx = Jump_statementContext(Context, State);
    EnterRule(localctx, 50, rULE_jump_statement);
    try {
      EnterOuterAlt(localctx, 1);
 {
        State = 296;
        Match(cOMMAND_START);
        State = 297;
        Match(cOMMAND_JUMP);
        State = 298;
        localctx.destination = Match(iD);
        State = 299;
        Match(cOMMAND_END);
      }
    }
    on RecognitionException catch (re) {
      localctx.exception = re;
      ErrorHandler.reportError(this, re);
      ErrorHandler.recover(this, re);
    }
    finally {
      ExitRule();
    }
    return localctx;
  }

  bool sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
    switch (ruleIndex) {
      case 10: {
        return _expression_sempred(localctx as ExpressionContext, predIndex);
      }
    }
    return true;
  }
  bool _expression_sempred(ExpressionContext _localctx, int predIndex) {
    switch (predIndex) {
      case 0: {
        return Precpred(Context, 6);
      }
      case 1: {
        return Precpred(Context, 5);
      }
      case 2: {
        return Precpred(Context, 4);
      }
      case 3: {
        return Precpred(Context, 3);
      }
      case 4: {
        return Precpred(Context, 2);
      }
    }
    return true;
  }

  static List<String> _serializedATN = ['\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', '\x5964', '\x3', 'P', '\x130', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', '\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', '\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', '\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', '\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', '\x1B', '\t', '\x1B', '\x3', '\x2', '\a', '\x2', '\x38', '\n', '\x2', '\f', '\x2', '\xE', '\x2', ';', '\v', '\x2', '\x3', '\x2', '\x6', '\x2', '>', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '?', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x6', '\x4', '\x46', '\n', '\x4', '\r', '\x4', '\xE', '\x4', 'G', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'Q', '\n', '\x5', '\x3', '\x6', '\a', '\x6', 'T', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'W', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x63', '\n', '\a', '\f', '\a', '\xE', '\a', '\x66', '\v', '\a', '\x3', '\a', '\x5', '\a', 'i', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'm', '\n', '\b', '\x3', '\b', '\a', '\b', 'p', '\n', '\b', '\f', '\b', '\xE', '\b', 's', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x6', '\t', 'x', '\n', '\t', '\r', '\t', '\xE', '\t', 'y', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x6', '\t', '\x80', '\n', '\t', '\r', '\t', '\xE', '\t', '\x81', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x96', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xA7', '\n', '\f', '\f', '\f', '\xE', '\f', '\xAA', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xB3', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xBA', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xBE', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xC1', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\xC7', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xCA', '\v', '\x10', '\x3', '\x10', '\x5', '\x10', '\xCD', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\xD8', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xDB', '\v', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\xE2', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xE5', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\xEB', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\xEE', '\v', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x100', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x103', '\v', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\x10A', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x10D', '\v', '\x17', '\x3', '\x18', '\x6', '\x18', '\x110', '\n', '\x18', '\r', '\x18', '\xE', '\x18', '\x111', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x118', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x11B', '\v', '\x19', '\x3', '\x19', '\x5', '\x19', '\x11E', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x127', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x2', '\x3', '\x16', '\x1C', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x2', '\b', '\x3', '\x2', '\x30', '\x32', '\x3', '\x2', '.', '/', '\x4', '\x2', '\x1F', ' ', '\"', '#', '\x4', '\x2', '!', '!', '$', '$', '\x3', '\x2', '%', '\'', '\x4', '\x2', '\x1E', '\x1E', ')', '-', '\x2', '\x144', '\x2', '\x39', '\x3', '\x2', '\x2', '\x2', '\x4', '\x41', '\x3', '\x2', '\x2', '\x2', '\x6', '\x45', '\x3', '\x2', '\x2', '\x2', '\b', 'M', '\x3', '\x2', '\x2', '\x2', '\n', 'U', '\x3', '\x2', '\x2', '\x2', '\f', 'h', '\x3', '\x2', '\x2', '\x2', '\xE', 'j', '\x3', '\x2', '\x2', '\x2', '\x10', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x12', '\x83', '\x3', '\x2', '\x2', '\x2', '\x14', '\x86', '\x3', '\x2', '\x2', '\x2', '\x16', '\x95', '\x3', '\x2', '\x2', '\x2', '\x18', '\xB2', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xB4', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xB6', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xC4', '\x3', '\x2', '\x2', '\x2', ' ', '\xD2', '\x3', '\x2', '\x2', '\x2', '\"', '\xDC', '\x3', '\x2', '\x2', '\x2', '$', '\xE6', '\x3', '\x2', '\x2', '\x2', '&', '\xEF', '\x3', '\x2', '\x2', '\x2', '(', '\xF6', '\x3', '\x2', '\x2', '\x2', '*', '\xFB', '\x3', '\x2', '\x2', '\x2', ',', '\x10B', '\x3', '\x2', '\x2', '\x2', '.', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x30', '\x113', '\x3', '\x2', '\x2', '\x2', '\x32', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x34', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x36', '\x38', '\x5', '\x4', '\x3', '\x2', '\x37', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', ';', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', '=', '\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', '<', '>', '\x5', '\x6', '\x4', '\x2', '=', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\x3', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', '\v', '\x2', '\x2', '\x42', '\x43', '\a', '\x19', '\x2', '\x2', '\x43', '\x5', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\x5', '\b', '\x5', '\x2', '\x45', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\t', '\x2', '\x2', 'J', 'K', '\x5', '\n', '\x6', '\x2', 'K', 'L', '\a', '\xE', '\x2', '\x2', 'L', '\a', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\a', '\b', '\x2', '\x2', 'N', 'P', '\a', '\n', '\x2', '\x2', 'O', 'Q', '\a', '\f', '\x2', '\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', '\t', '\x3', '\x2', '\x2', '\x2', 'R', 'T', '\x5', '\f', '\a', '\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'W', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', '\v', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'X', 'i', '\x5', '\xE', '\b', '\x2', 'Y', 'i', '\x5', '\x1E', '\x10', '\x2', 'Z', 'i', '\x5', '&', '\x14', '\x2', '[', 'i', '\x5', '.', '\x18', '\x2', '\\', 'i', '\x5', '(', '\x15', '\x2', ']', 'i', '\x5', '*', '\x16', '\x2', '^', 'i', '\x5', '\x32', '\x1A', '\x2', '_', 'i', '\x5', '\x34', '\x1B', '\x2', '`', '\x64', '\a', '\x3', '\x2', '\x2', '\x61', '\x63', '\x5', '\f', '\a', '\x2', '\x62', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x66', '\x3', '\x2', '\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', 'g', '\x3', '\x2', '\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', 'g', 'i', '\a', '\x4', '\x2', '\x2', 'h', 'X', '\x3', '\x2', '\x2', '\x2', 'h', 'Y', '\x3', '\x2', '\x2', '\x2', 'h', 'Z', '\x3', '\x2', '\x2', '\x2', 'h', '[', '\x3', '\x2', '\x2', '\x2', 'h', '\\', '\x3', '\x2', '\x2', '\x2', 'h', ']', '\x3', '\x2', '\x2', '\x2', 'h', '^', '\x3', '\x2', '\x2', '\x2', 'h', '_', '\x3', '\x2', '\x2', '\x2', 'h', '`', '\x3', '\x2', '\x2', '\x2', 'i', '\r', '\x3', '\x2', '\x2', '\x2', 'j', 'l', '\x5', '\x10', '\t', '\x2', 'k', 'm', '\x5', '\x14', '\v', '\x2', 'l', 'k', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', 'q', '\x3', '\x2', '\x2', '\x2', 'n', 'p', '\x5', '\x12', '\n', '\x2', 'o', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 's', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 't', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\a', '\a', '\x2', '\x2', 'u', '\xF', '\x3', '\x2', '\x2', '\x2', 'v', 'x', '\a', '\x14', '\x2', '\x2', 'w', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '\x80', '\x3', '\x2', '\x2', '\x2', '{', '|', '\a', '\x11', '\x2', '\x2', '|', '}', '\x5', '\x16', '\f', '\x2', '}', '~', '\a', '\x39', '\x2', '\x2', '~', '\x80', '\x3', '\x2', '\x2', '\x2', '\x7F', 'w', '\x3', '\x2', '\x2', '\x2', '\x7F', '{', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x11', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\a', '\v', '\x2', '\x2', '\x84', '\x85', '\a', '\x19', '\x2', '\x2', '\x85', '\x13', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', '\x10', '\x2', '\x2', '\x87', '\x88', '\a', '>', '\x2', '\x2', '\x88', '\x89', '\x5', '\x16', '\f', '\x2', '\x89', '\x8A', '\a', 'J', '\x2', '\x2', '\x8A', '\x15', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\b', '\f', '\x1', '\x2', '\x8C', '\x8D', '\a', '\x33', '\x2', '\x2', '\x8D', '\x8E', '\x5', '\x16', '\f', '\x2', '\x8E', '\x8F', '\a', '\x34', '\x2', '\x2', '\x8F', '\x96', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', '/', '\x2', '\x2', '\x91', '\x96', '\x5', '\x16', '\f', '\n', '\x92', '\x93', '\a', '(', '\x2', '\x2', '\x93', '\x96', '\x5', '\x16', '\f', '\t', '\x94', '\x96', '\x5', '\x18', '\r', '\x2', '\x95', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x95', '\x90', '\x3', '\x2', '\x2', '\x2', '\x95', '\x92', '\x3', '\x2', '\x2', '\x2', '\x95', '\x94', '\x3', '\x2', '\x2', '\x2', '\x96', '\xA8', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\f', '\b', '\x2', '\x2', '\x98', '\x99', '\t', '\x2', '\x2', '\x2', '\x99', '\xA7', '\x5', '\x16', '\f', '\t', '\x9A', '\x9B', '\f', '\a', '\x2', '\x2', '\x9B', '\x9C', '\t', '\x3', '\x2', '\x2', '\x9C', '\xA7', '\x5', '\x16', '\f', '\b', '\x9D', '\x9E', '\f', '\x6', '\x2', '\x2', '\x9E', '\x9F', '\t', '\x4', '\x2', '\x2', '\x9F', '\xA7', '\x5', '\x16', '\f', '\a', '\xA0', '\xA1', '\f', '\x5', '\x2', '\x2', '\xA1', '\xA2', '\t', '\x5', '\x2', '\x2', '\xA2', '\xA7', '\x5', '\x16', '\f', '\x6', '\xA3', '\xA4', '\f', '\x4', '\x2', '\x2', '\xA4', '\xA5', '\t', '\x6', '\x2', '\x2', '\xA5', '\xA7', '\x5', '\x16', '\f', '\x5', '\xA6', '\x97', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x9A', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', '\x17', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xB3', '\a', '<', '\x2', '\x2', '\xAC', '\xB3', '\a', '\x1B', '\x2', '\x2', '\xAD', '\xB3', '\a', '\x1C', '\x2', '\x2', '\xAE', '\xB3', '\x5', '\x1A', '\xE', '\x2', '\xAF', '\xB3', '\a', '\x37', '\x2', '\x2', '\xB0', '\xB3', '\a', '\x1D', '\x2', '\x2', '\xB1', '\xB3', '\x5', '\x1C', '\xF', '\x2', '\xB2', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB3', '\x19', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\a', ':', '\x2', '\x2', '\xB5', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', '\x38', '\x2', '\x2', '\xB7', '\xB9', '\a', '\x33', '\x2', '\x2', '\xB8', '\xBA', '\x5', '\x16', '\f', '\x2', '\xB9', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\a', '\x35', '\x2', '\x2', '\xBC', '\xBE', '\x5', '\x16', '\f', '\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\a', '\x34', '\x2', '\x2', '\xC3', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC8', '\x5', ' ', '\x11', '\x2', '\xC5', '\xC7', '\x5', '\"', '\x12', '\x2', '\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCD', '\x5', '$', '\x13', '\x2', '\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\a', '\x10', '\x2', '\x2', '\xCF', '\xD0', '\a', '\x42', '\x2', '\x2', '\xD0', '\xD1', '\a', 'J', '\x2', '\x2', '\xD1', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\a', '\x10', '\x2', '\x2', '\xD3', '\xD4', '\a', '>', '\x2', '\x2', '\xD4', '\xD5', '\x5', '\x16', '\f', '\x2', '\xD5', '\xD9', '\a', 'J', '\x2', '\x2', '\xD6', '\xD8', '\x5', '\f', '\a', '\x2', '\xD7', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDA', '!', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\a', '\x10', '\x2', '\x2', '\xDD', '\xDE', '\a', '?', '\x2', '\x2', '\xDE', '\xDF', '\x5', '\x16', '\f', '\x2', '\xDF', '\xE3', '\a', 'J', '\x2', '\x2', '\xE0', '\xE2', '\x5', '\f', '\a', '\x2', '\xE1', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '#', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\a', '\x10', '\x2', '\x2', '\xE7', '\xE8', '\a', '@', '\x2', '\x2', '\xE8', '\xEC', '\a', 'J', '\x2', '\x2', '\xE9', '\xEB', '\x5', '\f', '\a', '\x2', '\xEA', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\x3', '\x2', '\x2', '\x2', '\xED', '%', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\a', '\x10', '\x2', '\x2', '\xF0', '\xF1', '\a', '\x41', '\x2', '\x2', '\xF1', '\xF2', '\x5', '\x1A', '\xE', '\x2', '\xF2', '\xF3', '\t', '\a', '\x2', '\x2', '\xF3', '\xF4', '\x5', '\x16', '\f', '\x2', '\xF4', '\xF5', '\a', 'J', '\x2', '\x2', '\xF5', '\'', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\a', '\x10', '\x2', '\x2', '\xF7', '\xF8', '\a', '\x43', '\x2', '\x2', '\xF8', '\xF9', '\x5', '\x1C', '\xF', '\x2', '\xF9', '\xFA', '\a', 'J', '\x2', '\x2', '\xFA', ')', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\a', '\x10', '\x2', '\x2', '\xFC', '\xFD', '\x5', ',', '\x17', '\x2', '\xFD', '\x101', '\a', 'K', '\x2', '\x2', '\xFE', '\x100', '\x5', '\x12', '\n', '\x2', '\xFF', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x100', '\x103', '\x3', '\x2', '\x2', '\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\x3', '\x2', '\x2', '\x2', '\x102', '+', '\x3', '\x2', '\x2', '\x2', '\x103', '\x101', '\x3', '\x2', '\x2', '\x2', '\x104', '\x10A', '\a', 'M', '\x2', '\x2', '\x105', '\x106', '\a', 'L', '\x2', '\x2', '\x106', '\x107', '\x5', '\x16', '\f', '\x2', '\x107', '\x108', '\a', '\x39', '\x2', '\x2', '\x108', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x109', '\x104', '\x3', '\x2', '\x2', '\x2', '\x109', '\x105', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', '-', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x110', '\x5', '\x30', '\x19', '\x2', '\x10F', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\x3', '\x2', '\x2', '\x2', '\x111', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', '\x112', '/', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\a', '\xF', '\x2', '\x2', '\x114', '\x11D', '\x5', '\xE', '\b', '\x2', '\x115', '\x119', '\a', '\x3', '\x2', '\x2', '\x116', '\x118', '\x5', '\f', '\a', '\x2', '\x117', '\x116', '\x3', '\x2', '\x2', '\x2', '\x118', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x119', '\x117', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11E', '\a', '\x4', '\x2', '\x2', '\x11D', '\x115', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x31', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\a', '\x10', '\x2', '\x2', '\x120', '\x121', '\a', '\x44', '\x2', '\x2', '\x121', '\x122', '\x5', '\x1A', '\xE', '\x2', '\x122', '\x123', '\a', '\x1E', '\x2', '\x2', '\x123', '\x126', '\x5', '\x18', '\r', '\x2', '\x124', '\x125', '\a', '\x36', '\x2', '\x2', '\x125', '\x127', '\a', '\x38', '\x2', '\x2', '\x126', '\x124', '\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\x3', '\x2', '\x2', '\x2', '\x128', '\x129', '\a', 'J', '\x2', '\x2', '\x129', '\x33', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\a', '\x10', '\x2', '\x2', '\x12B', '\x12C', '\a', '\x45', '\x2', '\x2', '\x12C', '\x12D', '\a', '\b', '\x2', '\x2', '\x12D', '\x12E', '\a', 'J', '\x2', '\x2', '\x12E', '\x35', '\x3', '\x2', '\x2', '\x2', ' ', '\x39', '?', 'G', 'P', 'U', '\x64', 'h', 'l', 'q', 'y', '\x7F', '\x81', '\x95', '\xA6', '\xA8', '\xB2', '\xB9', '\xBF', '\xC8', '\xCC', '\xD9', '\xE3', '\xEC', '\x101', '\x109', '\x10B', '\x111', '\x119', '\x11D', '\x126'];

  static final ATN ATN = ATNDeserializer().deserialize(_serializedATN);
}
class DialogueContext extends ParserRuleContext {
  List<NodeContext> node() {
    return GetRuleContexts<NodeContext>();
  }
  NodeContext node2(int i) {
    return GetRuleContext<NodeContext>(i);
  }
  List<File_hashtagContext> file_hashtag() {
    return GetRuleContexts<File_hashtagContext>();
  }
  File_hashtagContext file_hashtag2(int i) {
    return GetRuleContext<File_hashtagContext>(i);
  }
  DialogueContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_dialogue;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterDialogue(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitDialogue(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitDialogue(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class File_hashtagContext extends ParserRuleContext {
  IToken text;
  ITerminalNode hASHTAG() {
    return GetToken(YarnSpinnerParser.hASHTAG, 0);
  }
  ITerminalNode hASHTAG_TEXT() {
    return GetToken(YarnSpinnerParser.hASHTAG_TEXT, 0);
  }
  File_hashtagContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_file_hashtag;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterFile_hashtag(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitFile_hashtag(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitFile_hashtag(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class NodeContext extends ParserRuleContext {
  ITerminalNode bODY_START() {
    return GetToken(YarnSpinnerParser.bODY_START, 0);
  }
  BodyContext body() {
    return GetRuleContext<BodyContext>(0);
  }
  ITerminalNode bODY_END() {
    return GetToken(YarnSpinnerParser.bODY_END, 0);
  }
  List<HeaderContext> header() {
    return GetRuleContexts<HeaderContext>();
  }
  HeaderContext header2(int i) {
    return GetRuleContext<HeaderContext>(i);
  }
  NodeContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_node;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterNode(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitNode(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitNode(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class HeaderContext extends ParserRuleContext {
  IToken header_key;
  IToken header_value;
  ITerminalNode hEADER_DELIMITER() {
    return GetToken(YarnSpinnerParser.hEADER_DELIMITER, 0);
  }
  ITerminalNode iD() {
    return GetToken(YarnSpinnerParser.iD, 0);
  }
  ITerminalNode rEST_OF_LINE() {
    return GetToken(YarnSpinnerParser.rEST_OF_LINE, 0);
  }
  HeaderContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_header;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterHeader(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitHeader(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitHeader(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class BodyContext extends ParserRuleContext {
  List<StatementContext> statement() {
    return GetRuleContexts<StatementContext>();
  }
  StatementContext statement7(int i) {
    return GetRuleContext<StatementContext>(i);
  }
  BodyContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_body;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterBody(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitBody(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitBody(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class StatementContext extends ParserRuleContext {
  Line_statementContext line_statement() {
    return GetRuleContext<Line_statementContext>(0);
  }
  If_statementContext if_statement() {
    return GetRuleContext<If_statementContext>(0);
  }
  Set_statementContext set_statement() {
    return GetRuleContext<Set_statementContext>(0);
  }
  Shortcut_option_statementContext shortcut_option_statement() {
    return GetRuleContext<Shortcut_option_statementContext>(0);
  }
  Call_statementContext call_statement() {
    return GetRuleContext<Call_statementContext>(0);
  }
  Command_statementContext command_statement() {
    return GetRuleContext<Command_statementContext>(0);
  }
  Declare_statementContext declare_statement() {
    return GetRuleContext<Declare_statementContext>(0);
  }
  Jump_statementContext jump_statement() {
    return GetRuleContext<Jump_statementContext>(0);
  }
  ITerminalNode iNDENT() {
    return GetToken(YarnSpinnerParser.iNDENT, 0);
  }
  ITerminalNode dEDENT() {
    return GetToken(YarnSpinnerParser.dEDENT, 0);
  }
  List<StatementContext> statement() {
    return GetRuleContexts<StatementContext>();
  }
  StatementContext statement8(int i) {
    return GetRuleContext<StatementContext>(i);
  }
  StatementContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_statement;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterStatement(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitStatement(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitStatement(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class Line_statementContext extends ParserRuleContext {
  Line_formatted_textContext line_formatted_text() {
    return GetRuleContext<Line_formatted_textContext>(0);
  }
  ITerminalNode nEWLINE() {
    return GetToken(YarnSpinnerParser.nEWLINE, 0);
  }
  Line_conditionContext line_condition() {
    return GetRuleContext<Line_conditionContext>(0);
  }
  List<HashtagContext> hashtag() {
    return GetRuleContexts<HashtagContext>();
  }
  HashtagContext hashtag4(int i) {
    return GetRuleContext<HashtagContext>(i);
  }
  Line_statementContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_line_statement;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterLine_statement(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitLine_statement(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitLine_statement(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class Line_formatted_textContext extends ParserRuleContext {
  List<ITerminalNode> eXPRESSION_START() {
    return GetTokens(YarnSpinnerParser.eXPRESSION_START);
  }
  ITerminalNode eXPRESSION_START1(int i) {
    return GetToken(YarnSpinnerParser.eXPRESSION_START, i);
  }
  List<ExpressionContext> expression() {
    return GetRuleContexts<ExpressionContext>();
  }
  ExpressionContext expression11(int i) {
    return GetRuleContext<ExpressionContext>(i);
  }
  List<ITerminalNode> eXPRESSION_END() {
    return GetTokens(YarnSpinnerParser.eXPRESSION_END);
  }
  ITerminalNode eXPRESSION_END4(int i) {
    return GetToken(YarnSpinnerParser.eXPRESSION_END, i);
  }
  List<ITerminalNode> tEXT() {
    return GetTokens(YarnSpinnerParser.tEXT);
  }
  ITerminalNode tEXT2(int i) {
    return GetToken(YarnSpinnerParser.tEXT, i);
  }
  Line_formatted_textContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_line_formatted_text;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterLine_formatted_text(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitLine_formatted_text(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitLine_formatted_text(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class HashtagContext extends ParserRuleContext {
  IToken text;
  ITerminalNode hASHTAG() {
    return GetToken(YarnSpinnerParser.hASHTAG, 0);
  }
  ITerminalNode hASHTAG_TEXT() {
    return GetToken(YarnSpinnerParser.hASHTAG_TEXT, 0);
  }
  HashtagContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_hashtag;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterHashtag(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitHashtag(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitHashtag(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class Line_conditionContext extends ParserRuleContext {
  ITerminalNode cOMMAND_START() {
    return GetToken(YarnSpinnerParser.cOMMAND_START, 0);
  }
  ITerminalNode cOMMAND_IF() {
    return GetToken(YarnSpinnerParser.cOMMAND_IF, 0);
  }
  ExpressionContext expression() {
    return GetRuleContext<ExpressionContext>(0);
  }
  ITerminalNode cOMMAND_END() {
    return GetToken(YarnSpinnerParser.cOMMAND_END, 0);
  }
  Line_conditionContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_line_condition;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterLine_condition(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitLine_condition(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitLine_condition(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class ExpressionContext extends ParserRuleContext {
  ExpressionContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_expression;
  }


  ExpressionContext() {
  }
  void copyFrom(ExpressionContext context) {
    super.copyFrom(context);
  }
}
class ExpParensContext extends ExpressionContext {
  ITerminalNode lPAREN() {
    return GetToken(YarnSpinnerParser.lPAREN, 0);
  }
  ExpressionContext expression() {
    return GetRuleContext<ExpressionContext>(0);
  }
  ITerminalNode rPAREN() {
    return GetToken(YarnSpinnerParser.rPAREN, 0);
  }
  ExpParensContext(ExpressionContext context) {
    copyFrom(context);
  }
  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterExpParens(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitExpParens(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitExpParens(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class ExpMultDivModContext extends ExpressionContext {
  IToken op;
  List<ExpressionContext> expression() {
    return GetRuleContexts<ExpressionContext>();
  }
  ExpressionContext expression12(int i) {
    return GetRuleContext<ExpressionContext>(i);
  }
  ITerminalNode oPERATOR_MATHS_MULTIPLICATION() {
    return GetToken(YarnSpinnerParser.oPERATOR_MATHS_MULTIPLICATION, 0);
  }
  ITerminalNode oPERATOR_MATHS_DIVISION() {
    return GetToken(YarnSpinnerParser.oPERATOR_MATHS_DIVISION, 0);
  }
  ITerminalNode oPERATOR_MATHS_MODULUS() {
    return GetToken(YarnSpinnerParser.oPERATOR_MATHS_MODULUS, 0);
  }
  ExpMultDivModContext(ExpressionContext context) {
    copyFrom(context);
  }
  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterExpMultDivMod(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitExpMultDivMod(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitExpMultDivMod(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class ExpComparisonContext extends ExpressionContext {
  IToken op;
  List<ExpressionContext> expression() {
    return GetRuleContexts<ExpressionContext>();
  }
  ExpressionContext expression13(int i) {
    return GetRuleContext<ExpressionContext>(i);
  }
  ITerminalNode oPERATOR_LOGICAL_LESS_THAN_EQUALS() {
    return GetToken(YarnSpinnerParser.oPERATOR_LOGICAL_LESS_THAN_EQUALS, 0);
  }
  ITerminalNode oPERATOR_LOGICAL_GREATER_THAN_EQUALS() {
    return GetToken(YarnSpinnerParser.oPERATOR_LOGICAL_GREATER_THAN_EQUALS, 0);
  }
  ITerminalNode oPERATOR_LOGICAL_LESS() {
    return GetToken(YarnSpinnerParser.oPERATOR_LOGICAL_LESS, 0);
  }
  ITerminalNode oPERATOR_LOGICAL_GREATER() {
    return GetToken(YarnSpinnerParser.oPERATOR_LOGICAL_GREATER, 0);
  }
  ExpComparisonContext(ExpressionContext context) {
    copyFrom(context);
  }
  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterExpComparison(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitExpComparison(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitExpComparison(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class ExpNegativeContext extends ExpressionContext {
  IToken op;
  ExpressionContext expression() {
    return GetRuleContext<ExpressionContext>(0);
  }
  ITerminalNode oPERATOR_MATHS_SUBTRACTION() {
    return GetToken(YarnSpinnerParser.oPERATOR_MATHS_SUBTRACTION, 0);
  }
  ExpNegativeContext(ExpressionContext context) {
    copyFrom(context);
  }
  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterExpNegative(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitExpNegative(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitExpNegative(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class ExpAndOrXorContext extends ExpressionContext {
  IToken op;
  List<ExpressionContext> expression() {
    return GetRuleContexts<ExpressionContext>();
  }
  ExpressionContext expression14(int i) {
    return GetRuleContext<ExpressionContext>(i);
  }
  ITerminalNode oPERATOR_LOGICAL_AND() {
    return GetToken(YarnSpinnerParser.oPERATOR_LOGICAL_AND, 0);
  }
  ITerminalNode oPERATOR_LOGICAL_OR() {
    return GetToken(YarnSpinnerParser.oPERATOR_LOGICAL_OR, 0);
  }
  ITerminalNode oPERATOR_LOGICAL_XOR() {
    return GetToken(YarnSpinnerParser.oPERATOR_LOGICAL_XOR, 0);
  }
  ExpAndOrXorContext(ExpressionContext context) {
    copyFrom(context);
  }
  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterExpAndOrXor(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitExpAndOrXor(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitExpAndOrXor(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class ExpAddSubContext extends ExpressionContext {
  IToken op;
  List<ExpressionContext> expression() {
    return GetRuleContexts<ExpressionContext>();
  }
  ExpressionContext expression15(int i) {
    return GetRuleContext<ExpressionContext>(i);
  }
  ITerminalNode oPERATOR_MATHS_ADDITION() {
    return GetToken(YarnSpinnerParser.oPERATOR_MATHS_ADDITION, 0);
  }
  ITerminalNode oPERATOR_MATHS_SUBTRACTION() {
    return GetToken(YarnSpinnerParser.oPERATOR_MATHS_SUBTRACTION, 0);
  }
  ExpAddSubContext(ExpressionContext context) {
    copyFrom(context);
  }
  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterExpAddSub(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitExpAddSub(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitExpAddSub(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class ExpNotContext extends ExpressionContext {
  IToken op;
  ExpressionContext expression() {
    return GetRuleContext<ExpressionContext>(0);
  }
  ITerminalNode oPERATOR_LOGICAL_NOT() {
    return GetToken(YarnSpinnerParser.oPERATOR_LOGICAL_NOT, 0);
  }
  ExpNotContext(ExpressionContext context) {
    copyFrom(context);
  }
  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterExpNot(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitExpNot(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitExpNot(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class ExpValueContext extends ExpressionContext {
  ValueContext value() {
    return GetRuleContext<ValueContext>(0);
  }
  ExpValueContext(ExpressionContext context) {
    copyFrom(context);
  }
  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterExpValue(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitExpValue(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitExpValue(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class ExpEqualityContext extends ExpressionContext {
  IToken op;
  List<ExpressionContext> expression() {
    return GetRuleContexts<ExpressionContext>();
  }
  ExpressionContext expression16(int i) {
    return GetRuleContext<ExpressionContext>(i);
  }
  ITerminalNode oPERATOR_LOGICAL_EQUALS() {
    return GetToken(YarnSpinnerParser.oPERATOR_LOGICAL_EQUALS, 0);
  }
  ITerminalNode oPERATOR_LOGICAL_NOT_EQUALS() {
    return GetToken(YarnSpinnerParser.oPERATOR_LOGICAL_NOT_EQUALS, 0);
  }
  ExpEqualityContext(ExpressionContext context) {
    copyFrom(context);
  }
  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterExpEquality(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitExpEquality(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitExpEquality(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class ValueContext extends ParserRuleContext {
  ValueContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_value;
  }


  ValueContext() {
  }
  void copyFrom(ValueContext context) {
    super.copyFrom(context);
  }
}
class ValueNullContext extends ValueContext {
  ITerminalNode kEYWORD_NULL() {
    return GetToken(YarnSpinnerParser.kEYWORD_NULL, 0);
  }
  ValueNullContext(ValueContext context) {
    copyFrom(context);
  }
  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterValueNull(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitValueNull(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitValueNull(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class ValueNumberContext extends ValueContext {
  ITerminalNode nUMBER() {
    return GetToken(YarnSpinnerParser.nUMBER, 0);
  }
  ValueNumberContext(ValueContext context) {
    copyFrom(context);
  }
  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterValueNumber(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitValueNumber(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitValueNumber(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class ValueTrueContext extends ValueContext {
  ITerminalNode kEYWORD_TRUE() {
    return GetToken(YarnSpinnerParser.kEYWORD_TRUE, 0);
  }
  ValueTrueContext(ValueContext context) {
    copyFrom(context);
  }
  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterValueTrue(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitValueTrue(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitValueTrue(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class ValueFalseContext extends ValueContext {
  ITerminalNode kEYWORD_FALSE() {
    return GetToken(YarnSpinnerParser.kEYWORD_FALSE, 0);
  }
  ValueFalseContext(ValueContext context) {
    copyFrom(context);
  }
  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterValueFalse(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitValueFalse(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitValueFalse(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class ValueFuncContext extends ValueContext {
  Function_callContext function_call() {
    return GetRuleContext<Function_callContext>(0);
  }
  ValueFuncContext(ValueContext context) {
    copyFrom(context);
  }
  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterValueFunc(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitValueFunc(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitValueFunc(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class ValueVarContext extends ValueContext {
  VariableContext variable() {
    return GetRuleContext<VariableContext>(0);
  }
  ValueVarContext(ValueContext context) {
    copyFrom(context);
  }
  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterValueVar(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitValueVar(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitValueVar(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class ValueStringContext extends ValueContext {
  ITerminalNode sTRING() {
    return GetToken(YarnSpinnerParser.sTRING, 0);
  }
  ValueStringContext(ValueContext context) {
    copyFrom(context);
  }
  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterValueString(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitValueString(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitValueString(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class VariableContext extends ParserRuleContext {
  ITerminalNode vAR_ID() {
    return GetToken(YarnSpinnerParser.vAR_ID, 0);
  }
  VariableContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_variable;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterVariable(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitVariable(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitVariable(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class Function_callContext extends ParserRuleContext {
  ITerminalNode fUNC_ID() {
    return GetToken(YarnSpinnerParser.fUNC_ID, 0);
  }
  ITerminalNode lPAREN() {
    return GetToken(YarnSpinnerParser.lPAREN, 0);
  }
  ITerminalNode rPAREN() {
    return GetToken(YarnSpinnerParser.rPAREN, 0);
  }
  List<ExpressionContext> expression() {
    return GetRuleContexts<ExpressionContext>();
  }
  ExpressionContext expression18(int i) {
    return GetRuleContext<ExpressionContext>(i);
  }
  List<ITerminalNode> cOMMA() {
    return GetTokens(YarnSpinnerParser.cOMMA);
  }
  ITerminalNode cOMMA2(int i) {
    return GetToken(YarnSpinnerParser.cOMMA, i);
  }
  Function_callContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_function_call;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterFunction_call(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitFunction_call(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitFunction_call(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class If_statementContext extends ParserRuleContext {
  If_clauseContext if_clause() {
    return GetRuleContext<If_clauseContext>(0);
  }
  ITerminalNode cOMMAND_START() {
    return GetToken(YarnSpinnerParser.cOMMAND_START, 0);
  }
  ITerminalNode cOMMAND_ENDIF() {
    return GetToken(YarnSpinnerParser.cOMMAND_ENDIF, 0);
  }
  ITerminalNode cOMMAND_END() {
    return GetToken(YarnSpinnerParser.cOMMAND_END, 0);
  }
  List<Else_if_clauseContext> else_if_clause() {
    return GetRuleContexts<Else_if_clauseContext>();
  }
  Else_if_clauseContext else_if_clause2(int i) {
    return GetRuleContext<Else_if_clauseContext>(i);
  }
  Else_clauseContext else_clause() {
    return GetRuleContext<Else_clauseContext>(0);
  }
  If_statementContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_if_statement;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterIf_statement(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitIf_statement(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitIf_statement(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class If_clauseContext extends ParserRuleContext {
  ITerminalNode cOMMAND_START() {
    return GetToken(YarnSpinnerParser.cOMMAND_START, 0);
  }
  ITerminalNode cOMMAND_IF() {
    return GetToken(YarnSpinnerParser.cOMMAND_IF, 0);
  }
  ExpressionContext expression() {
    return GetRuleContext<ExpressionContext>(0);
  }
  ITerminalNode cOMMAND_END() {
    return GetToken(YarnSpinnerParser.cOMMAND_END, 0);
  }
  List<StatementContext> statement() {
    return GetRuleContexts<StatementContext>();
  }
  StatementContext statement9(int i) {
    return GetRuleContext<StatementContext>(i);
  }
  If_clauseContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_if_clause;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterIf_clause(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitIf_clause(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitIf_clause(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class Else_if_clauseContext extends ParserRuleContext {
  ITerminalNode cOMMAND_START() {
    return GetToken(YarnSpinnerParser.cOMMAND_START, 0);
  }
  ITerminalNode cOMMAND_ELSEIF() {
    return GetToken(YarnSpinnerParser.cOMMAND_ELSEIF, 0);
  }
  ExpressionContext expression() {
    return GetRuleContext<ExpressionContext>(0);
  }
  ITerminalNode cOMMAND_END() {
    return GetToken(YarnSpinnerParser.cOMMAND_END, 0);
  }
  List<StatementContext> statement() {
    return GetRuleContexts<StatementContext>();
  }
  StatementContext statement10(int i) {
    return GetRuleContext<StatementContext>(i);
  }
  Else_if_clauseContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_else_if_clause;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterElse_if_clause(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitElse_if_clause(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitElse_if_clause(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class Else_clauseContext extends ParserRuleContext {
  ITerminalNode cOMMAND_START() {
    return GetToken(YarnSpinnerParser.cOMMAND_START, 0);
  }
  ITerminalNode cOMMAND_ELSE() {
    return GetToken(YarnSpinnerParser.cOMMAND_ELSE, 0);
  }
  ITerminalNode cOMMAND_END() {
    return GetToken(YarnSpinnerParser.cOMMAND_END, 0);
  }
  List<StatementContext> statement() {
    return GetRuleContexts<StatementContext>();
  }
  StatementContext statement11(int i) {
    return GetRuleContext<StatementContext>(i);
  }
  Else_clauseContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_else_clause;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterElse_clause(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitElse_clause(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitElse_clause(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class Set_statementContext extends ParserRuleContext {
  IToken op;
  ITerminalNode cOMMAND_START() {
    return GetToken(YarnSpinnerParser.cOMMAND_START, 0);
  }
  ITerminalNode cOMMAND_SET() {
    return GetToken(YarnSpinnerParser.cOMMAND_SET, 0);
  }
  VariableContext variable() {
    return GetRuleContext<VariableContext>(0);
  }
  ExpressionContext expression() {
    return GetRuleContext<ExpressionContext>(0);
  }
  ITerminalNode cOMMAND_END() {
    return GetToken(YarnSpinnerParser.cOMMAND_END, 0);
  }
  ITerminalNode oPERATOR_ASSIGNMENT() {
    return GetToken(YarnSpinnerParser.oPERATOR_ASSIGNMENT, 0);
  }
  ITerminalNode oPERATOR_MATHS_MULTIPLICATION_EQUALS() {
    return GetToken(YarnSpinnerParser.oPERATOR_MATHS_MULTIPLICATION_EQUALS, 0);
  }
  ITerminalNode oPERATOR_MATHS_DIVISION_EQUALS() {
    return GetToken(YarnSpinnerParser.oPERATOR_MATHS_DIVISION_EQUALS, 0);
  }
  ITerminalNode oPERATOR_MATHS_MODULUS_EQUALS() {
    return GetToken(YarnSpinnerParser.oPERATOR_MATHS_MODULUS_EQUALS, 0);
  }
  ITerminalNode oPERATOR_MATHS_ADDITION_EQUALS() {
    return GetToken(YarnSpinnerParser.oPERATOR_MATHS_ADDITION_EQUALS, 0);
  }
  ITerminalNode oPERATOR_MATHS_SUBTRACTION_EQUALS() {
    return GetToken(YarnSpinnerParser.oPERATOR_MATHS_SUBTRACTION_EQUALS, 0);
  }
  Set_statementContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_set_statement;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterSet_statement(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitSet_statement(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitSet_statement(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class Call_statementContext extends ParserRuleContext {
  ITerminalNode cOMMAND_START() {
    return GetToken(YarnSpinnerParser.cOMMAND_START, 0);
  }
  ITerminalNode cOMMAND_CALL() {
    return GetToken(YarnSpinnerParser.cOMMAND_CALL, 0);
  }
  Function_callContext function_call() {
    return GetRuleContext<Function_callContext>(0);
  }
  ITerminalNode cOMMAND_END() {
    return GetToken(YarnSpinnerParser.cOMMAND_END, 0);
  }
  Call_statementContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_call_statement;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterCall_statement(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitCall_statement(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitCall_statement(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class Command_statementContext extends ParserRuleContext {
  ITerminalNode cOMMAND_START() {
    return GetToken(YarnSpinnerParser.cOMMAND_START, 0);
  }
  Command_formatted_textContext command_formatted_text() {
    return GetRuleContext<Command_formatted_textContext>(0);
  }
  ITerminalNode cOMMAND_TEXT_END() {
    return GetToken(YarnSpinnerParser.cOMMAND_TEXT_END, 0);
  }
  List<HashtagContext> hashtag() {
    return GetRuleContexts<HashtagContext>();
  }
  HashtagContext hashtag5(int i) {
    return GetRuleContext<HashtagContext>(i);
  }
  Command_statementContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_command_statement;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterCommand_statement(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitCommand_statement(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitCommand_statement(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class Command_formatted_textContext extends ParserRuleContext {
  List<ITerminalNode> cOMMAND_TEXT() {
    return GetTokens(YarnSpinnerParser.cOMMAND_TEXT);
  }
  ITerminalNode cOMMAND_TEXT2(int i) {
    return GetToken(YarnSpinnerParser.cOMMAND_TEXT, i);
  }
  List<ITerminalNode> cOMMAND_EXPRESSION_START() {
    return GetTokens(YarnSpinnerParser.cOMMAND_EXPRESSION_START);
  }
  ITerminalNode cOMMAND_EXPRESSION_START2(int i) {
    return GetToken(YarnSpinnerParser.cOMMAND_EXPRESSION_START, i);
  }
  List<ExpressionContext> expression() {
    return GetRuleContexts<ExpressionContext>();
  }
  ExpressionContext expression19(int i) {
    return GetRuleContext<ExpressionContext>(i);
  }
  List<ITerminalNode> eXPRESSION_END() {
    return GetTokens(YarnSpinnerParser.eXPRESSION_END);
  }
  ITerminalNode eXPRESSION_END5(int i) {
    return GetToken(YarnSpinnerParser.eXPRESSION_END, i);
  }
  Command_formatted_textContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_command_formatted_text;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterCommand_formatted_text(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitCommand_formatted_text(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitCommand_formatted_text(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class Shortcut_option_statementContext extends ParserRuleContext {
  List<Shortcut_optionContext> shortcut_option() {
    return GetRuleContexts<Shortcut_optionContext>();
  }
  Shortcut_optionContext shortcut_option2(int i) {
    return GetRuleContext<Shortcut_optionContext>(i);
  }
  Shortcut_option_statementContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_shortcut_option_statement;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterShortcut_option_statement(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitShortcut_option_statement(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitShortcut_option_statement(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class Shortcut_optionContext extends ParserRuleContext {
  ITerminalNode sHORTCUT_ARROW() {
    return GetToken(YarnSpinnerParser.sHORTCUT_ARROW, 0);
  }
  Line_statementContext line_statement() {
    return GetRuleContext<Line_statementContext>(0);
  }
  ITerminalNode iNDENT() {
    return GetToken(YarnSpinnerParser.iNDENT, 0);
  }
  ITerminalNode dEDENT() {
    return GetToken(YarnSpinnerParser.dEDENT, 0);
  }
  List<StatementContext> statement() {
    return GetRuleContexts<StatementContext>();
  }
  StatementContext statement12(int i) {
    return GetRuleContext<StatementContext>(i);
  }
  Shortcut_optionContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_shortcut_option;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterShortcut_option(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitShortcut_option(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitShortcut_option(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class Declare_statementContext extends ParserRuleContext {
  IToken type;
  ITerminalNode cOMMAND_START() {
    return GetToken(YarnSpinnerParser.cOMMAND_START, 0);
  }
  ITerminalNode cOMMAND_DECLARE() {
    return GetToken(YarnSpinnerParser.cOMMAND_DECLARE, 0);
  }
  VariableContext variable() {
    return GetRuleContext<VariableContext>(0);
  }
  ITerminalNode oPERATOR_ASSIGNMENT() {
    return GetToken(YarnSpinnerParser.oPERATOR_ASSIGNMENT, 0);
  }
  ValueContext value() {
    return GetRuleContext<ValueContext>(0);
  }
  ITerminalNode cOMMAND_END() {
    return GetToken(YarnSpinnerParser.cOMMAND_END, 0);
  }
  ITerminalNode eXPRESSION_AS() {
    return GetToken(YarnSpinnerParser.eXPRESSION_AS, 0);
  }
  ITerminalNode fUNC_ID() {
    return GetToken(YarnSpinnerParser.fUNC_ID, 0);
  }
  Declare_statementContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_declare_statement;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterDeclare_statement(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitDeclare_statement(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitDeclare_statement(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
class Jump_statementContext extends ParserRuleContext {
  IToken destination;
  ITerminalNode cOMMAND_START() {
    return GetToken(YarnSpinnerParser.cOMMAND_START, 0);
  }
  ITerminalNode cOMMAND_JUMP() {
    return GetToken(YarnSpinnerParser.cOMMAND_JUMP, 0);
  }
  ITerminalNode cOMMAND_END() {
    return GetToken(YarnSpinnerParser.cOMMAND_END, 0);
  }
  ITerminalNode iD() {
    return GetToken(YarnSpinnerParser.iD, 0);
  }
  Jump_statementContext(ParserRuleContext parent, int invokingState) {
  }
  int get ruleIndex {
    return rULE_jump_statement;
  }

  void enterRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.enterJump_statement(this);
    }

  }
  void exitRule(IParseTreeListener listener) {
    IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
    if (typedListener != null) {
      typedListener.exitJump_statement(this);
    }

  }
  TResult accept<TResult>(IParseTreeVisitor<TResult> visitor) {
    IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
    if (typedVisitor != null) {
      return typedVisitor.visitJump_statement(this);
    }
    else {
      return visitor.visitChildren(this);
    }
  }
}
// namespace Yarn.Compiler
