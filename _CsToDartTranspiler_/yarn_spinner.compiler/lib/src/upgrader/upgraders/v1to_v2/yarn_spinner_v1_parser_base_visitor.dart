//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

import 'package:yarn_spinner.compiler.framework/src/upgrader/upgraders/v1to_v2/yarn_spinner_v1_parser.dart';
import 'package:yarn_spinner.compiler.framework/src/upgrader/upgraders/v1to_v2/yarn_spinner_v1_parser_visitor.dart';

// Generated from /Users/desplesda/Work/yarnspinner/YarnSpinner.Compiler/Upgrader/Upgraders/V1toV2/YarnSpinnerV1Parser.g4 by ANTLR 4.8

// Unreachable code detected
// The variable '...' is assigned but its value is never used
// Missing XML comment for publicly visible type or member '...'
// Ambiguous reference in cref attribute


class YarnSpinnerV1ParserBaseVisitor<Result> extends AbstractParseTreeVisitor<Result> implements IYarnSpinnerV1ParserVisitor<Result> {
  @override
  Result visitDialogue(DialogueContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitFile_hashtag(File_hashtagContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitNode(NodeContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitHeader(HeaderContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitBody(BodyContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitStatement(StatementContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitLine_statement(Line_statementContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitLine_formatted_text(Line_formatted_textContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitFormat_function(Format_functionContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitKeyValuePairNamed(KeyValuePairNamedContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitKeyValuePairNumber(KeyValuePairNumberContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitHashtag(HashtagContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitLine_condition(Line_conditionContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitExpParens(ExpParensContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitExpMultDivMod(ExpMultDivModContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitExpMultDivModEquals(ExpMultDivModEqualsContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitExpComparison(ExpComparisonContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitExpNegative(ExpNegativeContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitExpAndOrXor(ExpAndOrXorContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitExpPlusMinusEquals(ExpPlusMinusEqualsContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitExpAddSub(ExpAddSubContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitExpNot(ExpNotContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitExpValue(ExpValueContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitExpEquality(ExpEqualityContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitValueNumber(ValueNumberContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitValueTrue(ValueTrueContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitValueFalse(ValueFalseContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitValueVar(ValueVarContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitValueString(ValueStringContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitValueNull(ValueNullContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitValueFunc(ValueFuncContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitVariable(VariableContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitFunction(FunctionContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitIf_statement(If_statementContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitIf_clause(If_clauseContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitElse_if_clause(Else_if_clauseContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitElse_clause(Else_clauseContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitSetVariableToValue(SetVariableToValueContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitSetExpression(SetExpressionContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitCall_statement(Call_statementContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitCommand_statement(Command_statementContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitCommand_formatted_text(Command_formatted_textContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitShortcut_option_statement(Shortcut_option_statementContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitShortcut_option(Shortcut_optionContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitOptionLink(OptionLinkContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitOptionJump(OptionJumpContext context) {
    return VisitChildren(context);
  }
  @override
  Result visitOption_formatted_text(Option_formatted_textContext context) {
    return VisitChildren(context);
  }
}
// namespace Yarn.Compiler
