
// This code was generated by a tool. Do not edit it directly.
//
// Last generated: 16/3/20 1:26:48 am UTC
//
// This class converts a number to its plural class, based on the supplied
// locale. The plural rules are derived from Unicode CLDR, version 36.1.
//
// For more information, see Unicode's page at http://cldr.unicode.org


class PluralCase {
  final int value;
  final String name;
  const PluralCase._(this.value, this.name);

  static const zero = const PluralCase._(0, 'zero');
  static const one = const PluralCase._(1, 'one');
  static const two = const PluralCase._(2, 'two');
  static const few = const PluralCase._(3, 'few');
  static const many = const PluralCase._(4, 'many');
  static const other = const PluralCase._(5, 'other');

  static const List<PluralCase> values = [
    zero,
    one,
    two,
    few,
    many,
    other,
  ];

  @override
  String toString() => 'PluralCase' + '.' + name;

}
class NumberPlurals {
  // Bambara (bm), Tibetan (bo), Dzongkha (dz), Indonesian (id), Igbo
  // (ig), Sichuan Yi (ii), <unknown> (in), Japanese (ja), Lojban
  // (jbo), Javanese (jv), <unknown> (jw), Makonde (kde),
  // Kabuverdianu (kea), Khmer (km), Korean (ko), Lakota (lkt), Lao
  // (lo), Malay (ms), Burmese (my), N’Ko (nqo), Osage (osa), Root
  // (root), Sakha (sah), Koyraboro Senni (ses), Sango (sg),
  // Sundanese (su), Thai (th), Tongan (to), Vietnamese (vi), Wolof
  // (wo), Yoruba (yo), Cantonese (yue), Chinese (zh)
  static PluralCase _getCardinalPluralCase_0(double number) {

    if (true) {
      return PluralCase.other;
    }

  }
  // Amharic (am), Assamese (as), Bangla (bn), Persian (fa), Gujarati
  // (gu), Hindi (hi), Kannada (kn), Zulu (zu)
  static PluralCase _getCardinalPluralCase_1(double number) {
    // Absolute value of number
    double n = number.absoluteValue();
    // Integer part of number
    int i = number.integerValue();

    if (((i == 0)) || ((n == 1.0))) {
      return PluralCase.one;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Fulah (ff), French (fr), Armenian (hy), Kabyle (kab)
  static PluralCase _getCardinalPluralCase_2(double number) {
    // Integer part of number
    int i = number.integerValue();

    if (((i == 0) || (i == 1))) {
      return PluralCase.one;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Portuguese (pt)
  static PluralCase _getCardinalPluralCase_3(double number) {
    // Integer part of number
    int i = number.integerValue();

    if (((i >= 0 && i <= 1))) {
      return PluralCase.one;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Asturian (ast), Catalan (ca), German (de), English (en),
  // Estonian (et), Finnish (fi), Western Frisian (fy), Galician
  // (gl), Interlingua (ia), Ido (io), Italian (it), <unknown> (ji),
  // Dutch (nl), European Portuguese (pt_PT), Sardinian (sc),
  // Sicilian (scn), Swedish (sv), Swahili (sw), Urdu (ur), Yiddish
  // (yi)
  static PluralCase _getCardinalPluralCase_4(double number) {
    // Integer part of number
    int i = number.integerValue();
    // Number of visible fraction digits with trailing zeroes
    int v = number.visibleFractionalDigits(true);

    if (((i == 1) && (v == 0))) {
      return PluralCase.one;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Sinhala (si)
  static PluralCase _getCardinalPluralCase_5(double number) {
    // Absolute value of number
    double n = number.absoluteValue();
    // Integer part of number
    int i = number.integerValue();
    // Fractional value, with trailing zeroes
    int f = number.fractionalValue();
    // TODO: trailing zeroes are not supported

    if (((n == 0.0) || (n == 1.0)) || ((i == 0) && (f == 1))) {
      return PluralCase.one;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Akan (ak), Bhojpuri (bho), <unknown> (guw), Lingala (ln),
  // Malagasy (mg), Northern Sotho (nso), Punjabi (pa), Tigrinya
  // (ti), Walloon (wa)
  static PluralCase _getCardinalPluralCase_6(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n >= 0.0 && n <= 1.0))) {
      return PluralCase.one;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Central Atlas Tamazight (tzm)
  static PluralCase _getCardinalPluralCase_7(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n >= 0.0 && n <= 1.0)) || ((n >= 11.0 && n <= 99.0))) {
      return PluralCase.one;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Afrikaans (af), Aragonese (an), Asu (asa), Azerbaijani (az),
  // Bemba (bem), Bena (bez), Bulgarian (bg), Bodo (brx), Chechen
  // (ce), Chiga (cgg), Cherokee (chr), Central Kurdish (ckb), Divehi
  // (dv), Ewe (ee), Greek (el), Esperanto (eo), Spanish (es), Basque
  // (eu), Faroese (fo), Friulian (fur), Swiss German (gsw), Hausa
  // (ha), Hawaiian (haw), Hungarian (hu), Ngomba (jgo), Machame
  // (jmc), Georgian (ka), Jju (kaj), Tyap (kcg), Kazakh (kk), Kako
  // (kkj), Kalaallisut (kl), Kashmiri (ks), Shambala (ksb), Kurdish
  // (ku), Kyrgyz (ky), Luxembourgish (lb), Ganda (lg), Masai (mas),
  // Metaʼ (mgo), Malayalam (ml), Mongolian (mn), Marathi (mr),
  // <unknown> (nah), Norwegian Bokmål (nb), North Ndebele (nd),
  // Nepali (ne), Norwegian Nynorsk (nn), Ngiemboon (nnh), Norwegian
  // (no), South Ndebele (nr), Nyanja (ny), Nyankole (nyn), Oromo
  // (om), Odia (or), Ossetic (os), Papiamento (pap), Pashto (ps),
  // Romansh (rm), Rombo (rof), Rwa (rwk), Samburu (saq), Sindhi
  // (sd), Southern Kurdish (sdh), Sena (seh), Shona (sn), Somali
  // (so), Albanian (sq), Swati (ss), Saho (ssy), Southern Sotho
  // (st), Syriac (syr), Tamil (ta), Telugu (te), Teso (teo), Tigre
  // (tig), Turkmen (tk), Tswana (tn), Turkish (tr), Tsonga (ts),
  // Uyghur (ug), Uzbek (uz), Venda (ve), Volapük (vo), Vunjo (vun),
  // Walser (wae), Xhosa (xh), Soga (xog)
  static PluralCase _getCardinalPluralCase_8(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n == 1.0))) {
      return PluralCase.one;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Danish (da)
  static PluralCase _getCardinalPluralCase_9(double number) {
    // Absolute value of number
    double n = number.absoluteValue();
    // Integer part of number
    int i = number.integerValue();
    // Fractional value, without trailing zeroes
    int t = number.fractionalValue();

    if (((n == 1.0)) || (!((t == 0)) && (i == 0) || (i == 1))) {
      return PluralCase.one;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Icelandic (is)
  static PluralCase _getCardinalPluralCase_10(double number) {
    // Integer part of number
    int i = number.integerValue();
    // Fractional value, without trailing zeroes
    int t = number.fractionalValue();

    if (((t == 0) && ((i % 10) == 1) && !(((i % 100) == 11))) || (!((t == 0)))) {
      return PluralCase.one;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Macedonian (mk)
  static PluralCase _getCardinalPluralCase_11(double number) {
    // Integer part of number
    int i = number.integerValue();
    // Number of visible fraction digits with trailing zeroes
    int v = number.visibleFractionalDigits(true);
    // Fractional value, with trailing zeroes
    int f = number.fractionalValue();
    // TODO: trailing zeroes are not supported

    if (((v == 0) && ((i % 10) == 1) && !(((i % 100) == 11))) || (((f % 10) == 1) && !(((f % 100) == 11)))) {
      return PluralCase.one;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Cebuano (ceb), Filipino (fil), Tagalog (tl)
  static PluralCase _getCardinalPluralCase_12(double number) {
    // Integer part of number
    int i = number.integerValue();
    // Number of visible fraction digits with trailing zeroes
    int v = number.visibleFractionalDigits(true);
    // Fractional value, with trailing zeroes
    int f = number.fractionalValue();
    // TODO: trailing zeroes are not supported

    if (((v == 0) && (i == 1) || (i == 2) || (i == 3)) || ((v == 0) && !(((i % 10) == 4) || ((i % 10) == 6) || ((i % 10) == 9))) || (!((v == 0)) && !(((f % 10) == 4) || ((f % 10) == 6) || ((f % 10) == 9)))) {
      return PluralCase.one;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Latvian (lv), Prussian (prg)
  static PluralCase _getCardinalPluralCase_13(double number) {
    // Absolute value of number
    double n = number.absoluteValue();
    // Number of visible fraction digits with trailing zeroes
    int v = number.visibleFractionalDigits(true);
    // Fractional value, with trailing zeroes
    int f = number.fractionalValue();
    // TODO: trailing zeroes are not supported

    if ((((n % 10.0) == 0.0)) || (((n % 100.0) >= 11.0 && (n % 100.0) <= 19.0)) || ((v == 2) && ((f % 100) >= 11 && (f % 100) <= 19))) {
      return PluralCase.zero;
    }


    if ((((n % 10.0) == 1.0) && !(((n % 100.0) == 11.0))) || ((v == 2) && ((f % 10) == 1) && !(((f % 100) == 11))) || (!((v == 2)) && ((f % 10) == 1))) {
      return PluralCase.one;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Langi (lag)
  static PluralCase _getCardinalPluralCase_14(double number) {
    // Absolute value of number
    double n = number.absoluteValue();
    // Integer part of number
    int i = number.integerValue();

    if (((n == 0.0))) {
      return PluralCase.zero;
    }


    if (((i == 0) || (i == 1) && !((n == 0.0)))) {
      return PluralCase.one;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Colognian (ksh)
  static PluralCase _getCardinalPluralCase_15(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n == 0.0))) {
      return PluralCase.zero;
    }


    if (((n == 1.0))) {
      return PluralCase.one;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Inuktitut (iu), Nama (naq), Northern Sami (se), Southern Sami
  // (sma), <unknown> (smi), Lule Sami (smj), Inari Sami (smn), Skolt
  // Sami (sms)
  static PluralCase _getCardinalPluralCase_16(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n == 1.0))) {
      return PluralCase.one;
    }


    if (((n == 2.0))) {
      return PluralCase.two;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Tachelhit (shi)
  static PluralCase _getCardinalPluralCase_17(double number) {
    // Absolute value of number
    double n = number.absoluteValue();
    // Integer part of number
    int i = number.integerValue();

    if (((i == 0)) || ((n == 1.0))) {
      return PluralCase.one;
    }


    if (((n >= 2.0 && n <= 10.0))) {
      return PluralCase.few;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // <unknown> (mo), Romanian (ro)
  static PluralCase _getCardinalPluralCase_18(double number) {
    // Absolute value of number
    double n = number.absoluteValue();
    // Integer part of number
    int i = number.integerValue();
    // Number of visible fraction digits with trailing zeroes
    int v = number.visibleFractionalDigits(true);

    if (((i == 1) && (v == 0))) {
      return PluralCase.one;
    }


    if ((!((v == 0))) || ((n == 0.0)) || (((n % 100.0) >= 2.0 && (n % 100.0) <= 19.0))) {
      return PluralCase.few;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Bosnian (bs), Croatian (hr), Serbo-Croatian (sh), Serbian (sr)
  static PluralCase _getCardinalPluralCase_19(double number) {
    // Integer part of number
    int i = number.integerValue();
    // Number of visible fraction digits with trailing zeroes
    int v = number.visibleFractionalDigits(true);
    // Fractional value, with trailing zeroes
    int f = number.fractionalValue();
    // TODO: trailing zeroes are not supported

    if (((v == 0) && ((i % 10) == 1) && !(((i % 100) == 11))) || (((f % 10) == 1) && !(((f % 100) == 11)))) {
      return PluralCase.one;
    }


    if (((v == 0) && ((i % 10) >= 2 && (i % 10) <= 4) && !(((i % 100) >= 12 && (i % 100) <= 14))) || (((f % 10) >= 2 && (f % 10) <= 4) && !(((f % 100) >= 12 && (f % 100) <= 14)))) {
      return PluralCase.few;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Scottish Gaelic (gd)
  static PluralCase _getCardinalPluralCase_20(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n == 1.0) || (n == 11.0))) {
      return PluralCase.one;
    }


    if (((n == 2.0) || (n == 12.0))) {
      return PluralCase.two;
    }


    if (((n >= 3.0 && n <= 10.0) || (n >= 13.0 && n <= 19.0))) {
      return PluralCase.few;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Slovenian (sl)
  static PluralCase _getCardinalPluralCase_21(double number) {
    // Integer part of number
    int i = number.integerValue();
    // Number of visible fraction digits with trailing zeroes
    int v = number.visibleFractionalDigits(true);

    if (((v == 0) && ((i % 100) == 1))) {
      return PluralCase.one;
    }


    if (((v == 0) && ((i % 100) == 2))) {
      return PluralCase.two;
    }


    if (((v == 0) && ((i % 100) >= 3 && (i % 100) <= 4)) || (!((v == 0)))) {
      return PluralCase.few;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Lower Sorbian (dsb), Upper Sorbian (hsb)
  static PluralCase _getCardinalPluralCase_22(double number) {
    // Integer part of number
    int i = number.integerValue();
    // Number of visible fraction digits with trailing zeroes
    int v = number.visibleFractionalDigits(true);
    // Fractional value, with trailing zeroes
    int f = number.fractionalValue();
    // TODO: trailing zeroes are not supported

    if (((v == 0) && ((i % 100) == 1)) || (((f % 100) == 1))) {
      return PluralCase.one;
    }


    if (((v == 0) && ((i % 100) == 2)) || (((f % 100) == 2))) {
      return PluralCase.two;
    }


    if (((v == 0) && ((i % 100) >= 3 && (i % 100) <= 4)) || (((f % 100) >= 3 && (f % 100) <= 4))) {
      return PluralCase.few;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Hebrew (he), <unknown> (iw)
  static PluralCase _getCardinalPluralCase_23(double number) {
    // Absolute value of number
    double n = number.absoluteValue();
    // Integer part of number
    int i = number.integerValue();
    // Number of visible fraction digits with trailing zeroes
    int v = number.visibleFractionalDigits(true);

    if (((i == 1) && (v == 0))) {
      return PluralCase.one;
    }


    if (((i == 2) && (v == 0))) {
      return PluralCase.two;
    }


    if (((v == 0) && !((n >= 0.0 && n <= 10.0)) && ((n % 10.0) == 0.0))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Czech (cs), Slovak (sk)
  static PluralCase _getCardinalPluralCase_24(double number) {
    // Integer part of number
    int i = number.integerValue();
    // Number of visible fraction digits with trailing zeroes
    int v = number.visibleFractionalDigits(true);

    if (((i == 1) && (v == 0))) {
      return PluralCase.one;
    }


    if (((i >= 2 && i <= 4) && (v == 0))) {
      return PluralCase.few;
    }


    if ((!((v == 0)))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Polish (pl)
  static PluralCase _getCardinalPluralCase_25(double number) {
    // Integer part of number
    int i = number.integerValue();
    // Number of visible fraction digits with trailing zeroes
    int v = number.visibleFractionalDigits(true);

    if (((i == 1) && (v == 0))) {
      return PluralCase.one;
    }


    if (((v == 0) && ((i % 10) >= 2 && (i % 10) <= 4) && !(((i % 100) >= 12 && (i % 100) <= 14)))) {
      return PluralCase.few;
    }


    if (((v == 0) && !((i == 1)) && ((i % 10) >= 0 && (i % 10) <= 1)) || ((v == 0) && ((i % 10) >= 5 && (i % 10) <= 9)) || ((v == 0) && ((i % 100) >= 12 && (i % 100) <= 14))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Belarusian (be)
  static PluralCase _getCardinalPluralCase_26(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if ((((n % 10.0) == 1.0) && !(((n % 100.0) == 11.0)))) {
      return PluralCase.one;
    }


    if ((((n % 10.0) >= 2.0 && (n % 10.0) <= 4.0) && !(((n % 100.0) >= 12.0 && (n % 100.0) <= 14.0)))) {
      return PluralCase.few;
    }


    if ((((n % 10.0) == 0.0)) || (((n % 10.0) >= 5.0 && (n % 10.0) <= 9.0)) || (((n % 100.0) >= 11.0 && (n % 100.0) <= 14.0))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Lithuanian (lt)
  static PluralCase _getCardinalPluralCase_27(double number) {
    // Absolute value of number
    double n = number.absoluteValue();
    // Fractional value, with trailing zeroes
    int f = number.fractionalValue();
    // TODO: trailing zeroes are not supported

    if ((((n % 10.0) == 1.0) && !(((n % 100.0) >= 11.0 && (n % 100.0) <= 19.0)))) {
      return PluralCase.one;
    }


    if ((((n % 10.0) >= 2.0 && (n % 10.0) <= 9.0) && !(((n % 100.0) >= 11.0 && (n % 100.0) <= 19.0)))) {
      return PluralCase.few;
    }


    if ((!((f == 0)))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Maltese (mt)
  static PluralCase _getCardinalPluralCase_28(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n == 1.0))) {
      return PluralCase.one;
    }


    if (((n == 0.0)) || (((n % 100.0) >= 2.0 && (n % 100.0) <= 10.0))) {
      return PluralCase.few;
    }


    if ((((n % 100.0) >= 11.0 && (n % 100.0) <= 19.0))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Russian (ru), Ukrainian (uk)
  static PluralCase _getCardinalPluralCase_29(double number) {
    // Integer part of number
    int i = number.integerValue();
    // Number of visible fraction digits with trailing zeroes
    int v = number.visibleFractionalDigits(true);

    if (((v == 0) && ((i % 10) == 1) && !(((i % 100) == 11)))) {
      return PluralCase.one;
    }


    if (((v == 0) && ((i % 10) >= 2 && (i % 10) <= 4) && !(((i % 100) >= 12 && (i % 100) <= 14)))) {
      return PluralCase.few;
    }


    if (((v == 0) && ((i % 10) == 0)) || ((v == 0) && ((i % 10) >= 5 && (i % 10) <= 9)) || ((v == 0) && ((i % 100) >= 11 && (i % 100) <= 14))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Breton (br)
  static PluralCase _getCardinalPluralCase_30(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if ((((n % 10.0) == 1.0) && !(((n % 100.0) == 11.0) || ((n % 100.0) == 71.0) || ((n % 100.0) == 91.0)))) {
      return PluralCase.one;
    }


    if ((((n % 10.0) == 2.0) && !(((n % 100.0) == 12.0) || ((n % 100.0) == 72.0) || ((n % 100.0) == 92.0)))) {
      return PluralCase.two;
    }


    if ((((n % 10.0) >= 3.0 && (n % 10.0) <= 4.0) || ((n % 10.0) == 9.0) && !(((n % 100.0) >= 10.0 && (n % 100.0) <= 19.0) || ((n % 100.0) >= 70.0 && (n % 100.0) <= 79.0) || ((n % 100.0) >= 90.0 && (n % 100.0) <= 99.0)))) {
      return PluralCase.few;
    }


    if ((!((n == 0.0)) && ((n % 1000000.0) == 0.0))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Irish (ga)
  static PluralCase _getCardinalPluralCase_31(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n == 1.0))) {
      return PluralCase.one;
    }


    if (((n == 2.0))) {
      return PluralCase.two;
    }


    if (((n >= 3.0 && n <= 6.0))) {
      return PluralCase.few;
    }


    if (((n >= 7.0 && n <= 10.0))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Manx (gv)
  static PluralCase _getCardinalPluralCase_32(double number) {
    // Integer part of number
    int i = number.integerValue();
    // Number of visible fraction digits with trailing zeroes
    int v = number.visibleFractionalDigits(true);

    if (((v == 0) && ((i % 10) == 1))) {
      return PluralCase.one;
    }


    if (((v == 0) && ((i % 10) == 2))) {
      return PluralCase.two;
    }


    if (((v == 0) && ((i % 100) == 0) || ((i % 100) == 20) || ((i % 100) == 40) || ((i % 100) == 60) || ((i % 100) == 80))) {
      return PluralCase.few;
    }


    if ((!((v == 0)))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Cornish (kw)
  static PluralCase _getCardinalPluralCase_33(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n == 0.0))) {
      return PluralCase.zero;
    }


    if (((n == 1.0))) {
      return PluralCase.one;
    }


    if ((((n % 100.0) == 2.0) || ((n % 100.0) == 22.0) || ((n % 100.0) == 42.0) || ((n % 100.0) == 62.0) || ((n % 100.0) == 82.0)) || (((n % 1000.0) == 0.0) && ((n % 100000.0) >= 1000.0 && (n % 100000.0) <= 20000.0) || ((n % 100000.0) == 40000.0) || ((n % 100000.0) == 60000.0) || ((n % 100000.0) == 80000.0)) || (!((n == 0.0)) && ((n % 1000000.0) == 100000.0))) {
      return PluralCase.two;
    }


    if ((((n % 100.0) == 3.0) || ((n % 100.0) == 23.0) || ((n % 100.0) == 43.0) || ((n % 100.0) == 63.0) || ((n % 100.0) == 83.0))) {
      return PluralCase.few;
    }


    if ((!((n == 1.0)) && ((n % 100.0) == 1.0) || ((n % 100.0) == 21.0) || ((n % 100.0) == 41.0) || ((n % 100.0) == 61.0) || ((n % 100.0) == 81.0))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Arabic (ar), Najdi Arabic (ars)
  static PluralCase _getCardinalPluralCase_34(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n == 0.0))) {
      return PluralCase.zero;
    }


    if (((n == 1.0))) {
      return PluralCase.one;
    }


    if (((n == 2.0))) {
      return PluralCase.two;
    }


    if ((((n % 100.0) >= 3.0 && (n % 100.0) <= 10.0))) {
      return PluralCase.few;
    }


    if ((((n % 100.0) >= 11.0 && (n % 100.0) <= 99.0))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Welsh (cy)
  static PluralCase _getCardinalPluralCase_35(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n == 0.0))) {
      return PluralCase.zero;
    }


    if (((n == 1.0))) {
      return PluralCase.one;
    }


    if (((n == 2.0))) {
      return PluralCase.two;
    }


    if (((n == 3.0))) {
      return PluralCase.few;
    }


    if (((n == 6.0))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Afrikaans (af), Amharic (am), Aragonese (an), Arabic (ar),
  // Bulgarian (bg), Bosnian (bs), Chechen (ce), Czech (cs), Danish
  // (da), German (de), Lower Sorbian (dsb), Greek (el), Spanish
  // (es), Estonian (et), Basque (eu), Persian (fa), Finnish (fi),
  // Western Frisian (fy), Galician (gl), Swiss German (gsw), Hebrew
  // (he), Croatian (hr), Upper Sorbian (hsb), Interlingua (ia),
  // Indonesian (id), <unknown> (in), Icelandic (is), <unknown> (iw),
  // Japanese (ja), Khmer (km), Kannada (kn), Korean (ko), Kyrgyz
  // (ky), Lithuanian (lt), Latvian (lv), Malayalam (ml), Mongolian
  // (mn), Burmese (my), Norwegian Bokmål (nb), Dutch (nl), Punjabi
  // (pa), Polish (pl), Prussian (prg), Pashto (ps), Portuguese (pt),
  // Root (root), Russian (ru), Sindhi (sd), Serbo-Croatian (sh),
  // Sinhala (si), Slovak (sk), Slovenian (sl), Serbian (sr), Swahili
  // (sw), Tamil (ta), Telugu (te), Thai (th), Turkish (tr), Urdu
  // (ur), Uzbek (uz), Cantonese (yue), Chinese (zh), Zulu (zu)
  static PluralCase _getOrdinalPluralCase_36(double number) {

    if (true) {
      return PluralCase.other;
    }

  }
  // Swedish (sv)
  static PluralCase _getOrdinalPluralCase_37(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if ((((n % 10.0) == 1.0) || ((n % 10.0) == 2.0) && !(((n % 100.0) == 11.0) || ((n % 100.0) == 12.0)))) {
      return PluralCase.one;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Filipino (fil), French (fr), Irish (ga), Armenian (hy), Lao
  // (lo), <unknown> (mo), Malay (ms), Romanian (ro), Tagalog (tl),
  // Vietnamese (vi)
  static PluralCase _getOrdinalPluralCase_38(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n == 1.0))) {
      return PluralCase.one;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Hungarian (hu)
  static PluralCase _getOrdinalPluralCase_39(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n == 1.0) || (n == 5.0))) {
      return PluralCase.one;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Nepali (ne)
  static PluralCase _getOrdinalPluralCase_40(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n >= 1.0 && n <= 4.0))) {
      return PluralCase.one;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Belarusian (be)
  static PluralCase _getOrdinalPluralCase_41(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if ((((n % 10.0) == 2.0) || ((n % 10.0) == 3.0) && !(((n % 100.0) == 12.0) || ((n % 100.0) == 13.0)))) {
      return PluralCase.few;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Ukrainian (uk)
  static PluralCase _getOrdinalPluralCase_42(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if ((((n % 10.0) == 3.0) && !(((n % 100.0) == 13.0)))) {
      return PluralCase.few;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Turkmen (tk)
  static PluralCase _getOrdinalPluralCase_43(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if ((((n % 10.0) == 6.0) || ((n % 10.0) == 9.0)) || ((n == 10.0))) {
      return PluralCase.few;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Kazakh (kk)
  static PluralCase _getOrdinalPluralCase_44(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if ((((n % 10.0) == 6.0)) || (((n % 10.0) == 9.0)) || (((n % 10.0) == 0.0) && !((n == 0.0)))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Italian (it), Sardinian (sc), Sicilian (scn)
  static PluralCase _getOrdinalPluralCase_45(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n == 11.0) || (n == 8.0) || (n == 80.0) || (n == 800.0))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Georgian (ka)
  static PluralCase _getOrdinalPluralCase_46(double number) {
    // Integer part of number
    int i = number.integerValue();

    if (((i == 1))) {
      return PluralCase.one;
    }


    if (((i == 0)) || (((i % 100) >= 2 && (i % 100) <= 20) || ((i % 100) == 40) || ((i % 100) == 60) || ((i % 100) == 80))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Albanian (sq)
  static PluralCase _getOrdinalPluralCase_47(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n == 1.0))) {
      return PluralCase.one;
    }


    if ((((n % 10.0) == 4.0) && !(((n % 100.0) == 14.0)))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Cornish (kw)
  static PluralCase _getOrdinalPluralCase_48(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n >= 1.0 && n <= 4.0)) || (((n % 100.0) >= 1.0 && (n % 100.0) <= 4.0) || ((n % 100.0) >= 21.0 && (n % 100.0) <= 24.0) || ((n % 100.0) >= 41.0 && (n % 100.0) <= 44.0) || ((n % 100.0) >= 61.0 && (n % 100.0) <= 64.0) || ((n % 100.0) >= 81.0 && (n % 100.0) <= 84.0))) {
      return PluralCase.one;
    }


    if (((n == 5.0)) || (((n % 100.0) == 5.0))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // English (en)
  static PluralCase _getOrdinalPluralCase_49(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if ((((n % 10.0) == 1.0) && !(((n % 100.0) == 11.0)))) {
      return PluralCase.one;
    }


    if ((((n % 10.0) == 2.0) && !(((n % 100.0) == 12.0)))) {
      return PluralCase.two;
    }


    if ((((n % 10.0) == 3.0) && !(((n % 100.0) == 13.0)))) {
      return PluralCase.few;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Marathi (mr)
  static PluralCase _getOrdinalPluralCase_50(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n == 1.0))) {
      return PluralCase.one;
    }


    if (((n == 2.0) || (n == 3.0))) {
      return PluralCase.two;
    }


    if (((n == 4.0))) {
      return PluralCase.few;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Scottish Gaelic (gd)
  static PluralCase _getOrdinalPluralCase_51(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n == 1.0) || (n == 11.0))) {
      return PluralCase.one;
    }


    if (((n == 2.0) || (n == 12.0))) {
      return PluralCase.two;
    }


    if (((n == 3.0) || (n == 13.0))) {
      return PluralCase.few;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Catalan (ca)
  static PluralCase _getOrdinalPluralCase_52(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n == 1.0) || (n == 3.0))) {
      return PluralCase.one;
    }


    if (((n == 2.0))) {
      return PluralCase.two;
    }


    if (((n == 4.0))) {
      return PluralCase.few;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Macedonian (mk)
  static PluralCase _getOrdinalPluralCase_53(double number) {
    // Integer part of number
    int i = number.integerValue();

    if ((((i % 10) == 1) && !(((i % 100) == 11)))) {
      return PluralCase.one;
    }


    if ((((i % 10) == 2) && !(((i % 100) == 12)))) {
      return PluralCase.two;
    }


    if ((((i % 10) == 7) || ((i % 10) == 8) && !(((i % 100) == 17) || ((i % 100) == 18)))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Azerbaijani (az)
  static PluralCase _getOrdinalPluralCase_54(double number) {
    // Integer part of number
    int i = number.integerValue();

    if ((((i % 10) == 1) || ((i % 10) == 2) || ((i % 10) == 5) || ((i % 10) == 7) || ((i % 10) == 8)) || (((i % 100) == 20) || ((i % 100) == 50) || ((i % 100) == 70) || ((i % 100) == 80))) {
      return PluralCase.one;
    }


    if ((((i % 10) == 3) || ((i % 10) == 4)) || (((i % 1000) == 100) || ((i % 1000) == 200) || ((i % 1000) == 300) || ((i % 1000) == 400) || ((i % 1000) == 500) || ((i % 1000) == 600) || ((i % 1000) == 700) || ((i % 1000) == 800) || ((i % 1000) == 900))) {
      return PluralCase.few;
    }


    if (((i == 0)) || (((i % 10) == 6)) || (((i % 100) == 40) || ((i % 100) == 60) || ((i % 100) == 90))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Gujarati (gu), Hindi (hi)
  static PluralCase _getOrdinalPluralCase_55(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n == 1.0))) {
      return PluralCase.one;
    }


    if (((n == 2.0) || (n == 3.0))) {
      return PluralCase.two;
    }


    if (((n == 4.0))) {
      return PluralCase.few;
    }


    if (((n == 6.0))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Assamese (as), Bangla (bn)
  static PluralCase _getOrdinalPluralCase_56(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n == 1.0) || (n == 5.0) || (n == 7.0) || (n == 8.0) || (n == 9.0) || (n == 10.0))) {
      return PluralCase.one;
    }


    if (((n == 2.0) || (n == 3.0))) {
      return PluralCase.two;
    }


    if (((n == 4.0))) {
      return PluralCase.few;
    }


    if (((n == 6.0))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Odia (or)
  static PluralCase _getOrdinalPluralCase_57(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n == 1.0) || (n == 5.0) || (n >= 7.0 && n <= 9.0))) {
      return PluralCase.one;
    }


    if (((n == 2.0) || (n == 3.0))) {
      return PluralCase.two;
    }


    if (((n == 4.0))) {
      return PluralCase.few;
    }


    if (((n == 6.0))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  // Welsh (cy)
  static PluralCase _getOrdinalPluralCase_58(double number) {
    // Absolute value of number
    double n = number.absoluteValue();

    if (((n == 0.0) || (n == 7.0) || (n == 8.0) || (n == 9.0))) {
      return PluralCase.zero;
    }


    if (((n == 1.0))) {
      return PluralCase.one;
    }


    if (((n == 2.0))) {
      return PluralCase.two;
    }


    if (((n == 3.0) || (n == 4.0))) {
      return PluralCase.few;
    }


    if (((n == 5.0) || (n == 6.0))) {
      return PluralCase.many;
    }


    if (true) {
      return PluralCase.other;
    }

  }
  static PluralCase getCardinalPluralCase(String localeCode, double value) {
    if (localeCode == "bm" || localeCode == "bo" || localeCode == "dz" || localeCode == "id" || localeCode == "ig" || localeCode == "ii" || localeCode == "in" || localeCode == "ja" || localeCode == "jbo" || localeCode == "jv" || localeCode == "jw" || localeCode == "kde" || localeCode == "kea" || localeCode == "km" || localeCode == "ko" || localeCode == "lkt" || localeCode == "lo" || localeCode == "ms" || localeCode == "my" || localeCode == "nqo" || localeCode == "osa" || localeCode == "root" || localeCode == "sah" || localeCode == "ses" || localeCode == "sg" || localeCode == "su" || localeCode == "th" || localeCode == "to" || localeCode == "vi" || localeCode == "wo" || localeCode == "yo" || localeCode == "yue" || localeCode == "zh") {
      return _getCardinalPluralCase_0(value);
    }


    if (localeCode == "am" || localeCode == "as" || localeCode == "bn" || localeCode == "fa" || localeCode == "gu" || localeCode == "hi" || localeCode == "kn" || localeCode == "zu") {
      return _getCardinalPluralCase_1(value);
    }


    if (localeCode == "ff" || localeCode == "fr" || localeCode == "hy" || localeCode == "kab") {
      return _getCardinalPluralCase_2(value);
    }


    if (localeCode == "pt") {
      return _getCardinalPluralCase_3(value);
    }


    if (localeCode == "ast" || localeCode == "ca" || localeCode == "de" || localeCode == "en" || localeCode == "et" || localeCode == "fi" || localeCode == "fy" || localeCode == "gl" || localeCode == "ia" || localeCode == "io" || localeCode == "it" || localeCode == "ji" || localeCode == "nl" || localeCode == "pt_PT" || localeCode == "sc" || localeCode == "scn" || localeCode == "sv" || localeCode == "sw" || localeCode == "ur" || localeCode == "yi") {
      return _getCardinalPluralCase_4(value);
    }


    if (localeCode == "si") {
      return _getCardinalPluralCase_5(value);
    }


    if (localeCode == "ak" || localeCode == "bho" || localeCode == "guw" || localeCode == "ln" || localeCode == "mg" || localeCode == "nso" || localeCode == "pa" || localeCode == "ti" || localeCode == "wa") {
      return _getCardinalPluralCase_6(value);
    }


    if (localeCode == "tzm") {
      return _getCardinalPluralCase_7(value);
    }


    if (localeCode == "af" || localeCode == "an" || localeCode == "asa" || localeCode == "az" || localeCode == "bem" || localeCode == "bez" || localeCode == "bg" || localeCode == "brx" || localeCode == "ce" || localeCode == "cgg" || localeCode == "chr" || localeCode == "ckb" || localeCode == "dv" || localeCode == "ee" || localeCode == "el" || localeCode == "eo" || localeCode == "es" || localeCode == "eu" || localeCode == "fo" || localeCode == "fur" || localeCode == "gsw" || localeCode == "ha" || localeCode == "haw" || localeCode == "hu" || localeCode == "jgo" || localeCode == "jmc" || localeCode == "ka" || localeCode == "kaj" || localeCode == "kcg" || localeCode == "kk" || localeCode == "kkj" || localeCode == "kl" || localeCode == "ks" || localeCode == "ksb" || localeCode == "ku" || localeCode == "ky" || localeCode == "lb" || localeCode == "lg" || localeCode == "mas" || localeCode == "mgo" || localeCode == "ml" || localeCode == "mn" || localeCode == "mr" || localeCode == "nah" || localeCode == "nb" || localeCode == "nd" || localeCode == "ne" || localeCode == "nn" || localeCode == "nnh" || localeCode == "no" || localeCode == "nr" || localeCode == "ny" || localeCode == "nyn" || localeCode == "om" || localeCode == "or" || localeCode == "os" || localeCode == "pap" || localeCode == "ps" || localeCode == "rm" || localeCode == "rof" || localeCode == "rwk" || localeCode == "saq" || localeCode == "sd" || localeCode == "sdh" || localeCode == "seh" || localeCode == "sn" || localeCode == "so" || localeCode == "sq" || localeCode == "ss" || localeCode == "ssy" || localeCode == "st" || localeCode == "syr" || localeCode == "ta" || localeCode == "te" || localeCode == "teo" || localeCode == "tig" || localeCode == "tk" || localeCode == "tn" || localeCode == "tr" || localeCode == "ts" || localeCode == "ug" || localeCode == "uz" || localeCode == "ve" || localeCode == "vo" || localeCode == "vun" || localeCode == "wae" || localeCode == "xh" || localeCode == "xog") {
      return _getCardinalPluralCase_8(value);
    }


    if (localeCode == "da") {
      return _getCardinalPluralCase_9(value);
    }


    if (localeCode == "is") {
      return _getCardinalPluralCase_10(value);
    }


    if (localeCode == "mk") {
      return _getCardinalPluralCase_11(value);
    }


    if (localeCode == "ceb" || localeCode == "fil" || localeCode == "tl") {
      return _getCardinalPluralCase_12(value);
    }


    if (localeCode == "lv" || localeCode == "prg") {
      return _getCardinalPluralCase_13(value);
    }


    if (localeCode == "lag") {
      return _getCardinalPluralCase_14(value);
    }


    if (localeCode == "ksh") {
      return _getCardinalPluralCase_15(value);
    }


    if (localeCode == "iu" || localeCode == "naq" || localeCode == "se" || localeCode == "sma" || localeCode == "smi" || localeCode == "smj" || localeCode == "smn" || localeCode == "sms") {
      return _getCardinalPluralCase_16(value);
    }


    if (localeCode == "shi") {
      return _getCardinalPluralCase_17(value);
    }


    if (localeCode == "mo" || localeCode == "ro") {
      return _getCardinalPluralCase_18(value);
    }


    if (localeCode == "bs" || localeCode == "hr" || localeCode == "sh" || localeCode == "sr") {
      return _getCardinalPluralCase_19(value);
    }


    if (localeCode == "gd") {
      return _getCardinalPluralCase_20(value);
    }


    if (localeCode == "sl") {
      return _getCardinalPluralCase_21(value);
    }


    if (localeCode == "dsb" || localeCode == "hsb") {
      return _getCardinalPluralCase_22(value);
    }


    if (localeCode == "he" || localeCode == "iw") {
      return _getCardinalPluralCase_23(value);
    }


    if (localeCode == "cs" || localeCode == "sk") {
      return _getCardinalPluralCase_24(value);
    }


    if (localeCode == "pl") {
      return _getCardinalPluralCase_25(value);
    }


    if (localeCode == "be") {
      return _getCardinalPluralCase_26(value);
    }


    if (localeCode == "lt") {
      return _getCardinalPluralCase_27(value);
    }


    if (localeCode == "mt") {
      return _getCardinalPluralCase_28(value);
    }


    if (localeCode == "ru" || localeCode == "uk") {
      return _getCardinalPluralCase_29(value);
    }


    if (localeCode == "br") {
      return _getCardinalPluralCase_30(value);
    }


    if (localeCode == "ga") {
      return _getCardinalPluralCase_31(value);
    }


    if (localeCode == "gv") {
      return _getCardinalPluralCase_32(value);
    }


    if (localeCode == "kw") {
      return _getCardinalPluralCase_33(value);
    }


    if (localeCode == "ar" || localeCode == "ars") {
      return _getCardinalPluralCase_34(value);
    }


    if (localeCode == "cy") {
      return _getCardinalPluralCase_35(value);
    }



    return PluralCase.other;
  }
  static PluralCase getOrdinalPluralCase(String localeCode, double value) {
    if (localeCode == "af" || localeCode == "am" || localeCode == "an" || localeCode == "ar" || localeCode == "bg" || localeCode == "bs" || localeCode == "ce" || localeCode == "cs" || localeCode == "da" || localeCode == "de" || localeCode == "dsb" || localeCode == "el" || localeCode == "es" || localeCode == "et" || localeCode == "eu" || localeCode == "fa" || localeCode == "fi" || localeCode == "fy" || localeCode == "gl" || localeCode == "gsw" || localeCode == "he" || localeCode == "hr" || localeCode == "hsb" || localeCode == "ia" || localeCode == "id" || localeCode == "in" || localeCode == "is" || localeCode == "iw" || localeCode == "ja" || localeCode == "km" || localeCode == "kn" || localeCode == "ko" || localeCode == "ky" || localeCode == "lt" || localeCode == "lv" || localeCode == "ml" || localeCode == "mn" || localeCode == "my" || localeCode == "nb" || localeCode == "nl" || localeCode == "pa" || localeCode == "pl" || localeCode == "prg" || localeCode == "ps" || localeCode == "pt" || localeCode == "root" || localeCode == "ru" || localeCode == "sd" || localeCode == "sh" || localeCode == "si" || localeCode == "sk" || localeCode == "sl" || localeCode == "sr" || localeCode == "sw" || localeCode == "ta" || localeCode == "te" || localeCode == "th" || localeCode == "tr" || localeCode == "ur" || localeCode == "uz" || localeCode == "yue" || localeCode == "zh" || localeCode == "zu") {
      return _getOrdinalPluralCase_36(value);
    }


    if (localeCode == "sv") {
      return _getOrdinalPluralCase_37(value);
    }


    if (localeCode == "fil" || localeCode == "fr" || localeCode == "ga" || localeCode == "hy" || localeCode == "lo" || localeCode == "mo" || localeCode == "ms" || localeCode == "ro" || localeCode == "tl" || localeCode == "vi") {
      return _getOrdinalPluralCase_38(value);
    }


    if (localeCode == "hu") {
      return _getOrdinalPluralCase_39(value);
    }


    if (localeCode == "ne") {
      return _getOrdinalPluralCase_40(value);
    }


    if (localeCode == "be") {
      return _getOrdinalPluralCase_41(value);
    }


    if (localeCode == "uk") {
      return _getOrdinalPluralCase_42(value);
    }


    if (localeCode == "tk") {
      return _getOrdinalPluralCase_43(value);
    }


    if (localeCode == "kk") {
      return _getOrdinalPluralCase_44(value);
    }


    if (localeCode == "it" || localeCode == "sc" || localeCode == "scn") {
      return _getOrdinalPluralCase_45(value);
    }


    if (localeCode == "ka") {
      return _getOrdinalPluralCase_46(value);
    }


    if (localeCode == "sq") {
      return _getOrdinalPluralCase_47(value);
    }


    if (localeCode == "kw") {
      return _getOrdinalPluralCase_48(value);
    }


    if (localeCode == "en") {
      return _getOrdinalPluralCase_49(value);
    }


    if (localeCode == "mr") {
      return _getOrdinalPluralCase_50(value);
    }


    if (localeCode == "gd") {
      return _getOrdinalPluralCase_51(value);
    }


    if (localeCode == "ca") {
      return _getOrdinalPluralCase_52(value);
    }


    if (localeCode == "mk") {
      return _getOrdinalPluralCase_53(value);
    }


    if (localeCode == "az") {
      return _getOrdinalPluralCase_54(value);
    }


    if (localeCode == "gu" || localeCode == "hi") {
      return _getOrdinalPluralCase_55(value);
    }


    if (localeCode == "as" || localeCode == "bn") {
      return _getOrdinalPluralCase_56(value);
    }


    if (localeCode == "or") {
      return _getOrdinalPluralCase_57(value);
    }


    if (localeCode == "cy") {
      return _getOrdinalPluralCase_58(value);
    }



    return PluralCase.other;
  }
}
class NumberHelpers {
  static double absoluteValue(double number) {
    return System.Math.abs(number);
  }

  static int integerValue(double number) {
    return System.Math.truncate(number) as int;
  }

  static int fractionalValue(double number) {
    String text = number.toString(System.Globalization.CultureInfo.invariantCulture);
    String text2 = (text.indexOf('.') < 0) ? "" : text.split('.')[1];
    if (text2 == "") {
      return 0;
    }

    return int.parse(text2);
  }

  static int visibleFractionalDigits(double number, bool trailingZeroes) {
    String text = number.toString(System.Globalization.CultureInfo.invariantCulture);
    String text2 = (text.indexOf('.') < 0) ? "" : text.split('.')[1];
    if (!trailingZeroes) {
      text2 = text2.trimEnd('0');
    }

    return text2.length;
  }
}
