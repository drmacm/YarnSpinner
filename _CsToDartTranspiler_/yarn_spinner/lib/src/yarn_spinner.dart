// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yarn_spinner.proto
// </auto-generated>

import 'package:yarn_spinner.framework/src/program.dart';
import 'package:yarn_spinner.framework/src/virtual_machine.dart';


/// Holder for reflection information generated from yarn_spinner.proto
class YarnSpinnerReflection {

  /// File descriptor for yarn_spinner.proto
  static FileDescriptor get descriptor {
    return _descriptor;
  }

  static FileDescriptor _descriptor;

  YarnSpinnerReflection() {
    List<int> descriptorData = globalSystem.Convert.fromBase64String(String.concat("ChJ5YXJuX3NwaW5uZXIucHJvdG8SBFlhcm4i+QEKB1Byb2dyYW0SDAoEbmFt", "ZRgBIAEoCRInCgVub2RlcxgCIAMoCzIYLllhcm4uUHJvZ3JhbS5Ob2Rlc0Vu", "dHJ5EjgKDmluaXRpYWxfdmFsdWVzGAMgAygLMiAuWWFybi5Qcm9ncmFtLklu", "aXRpYWxWYWx1ZXNFbnRyeRo4CgpOb2Rlc0VudHJ5EgsKA2tleRgBIAEoCRIZ", "CgV2YWx1ZRgCIAEoCzIKLllhcm4uTm9kZToCOAEaQwoSSW5pdGlhbFZhbHVl", "c0VudHJ5EgsKA2tleRgBIAEoCRIcCgV2YWx1ZRgCIAEoCzINLllhcm4uT3Bl", "cmFuZDoCOAEivgEKBE5vZGUSDAoEbmFtZRgBIAEoCRInCgxpbnN0cnVjdGlv", "bnMYAiADKAsyES5ZYXJuLkluc3RydWN0aW9uEiYKBmxhYmVscxgDIAMoCzIW", "Lllhcm4uTm9kZS5MYWJlbHNFbnRyeRIMCgR0YWdzGAQgAygJEhoKEnNvdXJj", "ZVRleHRTdHJpbmdJRBgFIAEoCRotCgtMYWJlbHNFbnRyeRILCgNrZXkYASAB", "KAkSDQoFdmFsdWUYAiABKAU6AjgBIuQCCgtJbnN0cnVjdGlvbhIoCgZvcGNv", "ZGUYASABKA4yGC5ZYXJuLkluc3RydWN0aW9uLk9wQ29kZRIfCghvcGVyYW5k", "cxgCIAMoCzINLllhcm4uT3BlcmFuZCKJAgoGT3BDb2RlEgsKB0pVTVBfVE8Q", "ABIICgRKVU1QEAESDAoIUlVOX0xJTkUQAhIPCgtSVU5fQ09NTUFORBADEg4K", "CkFERF9PUFRJT04QBBIQCgxTSE9XX09QVElPTlMQBRIPCgtQVVNIX1NUUklO", "RxAGEg4KClBVU0hfRkxPQVQQBxINCglQVVNIX0JPT0wQCBINCglQVVNIX05V", "TEwQCRIRCg1KVU1QX0lGX0ZBTFNFEAoSBwoDUE9QEAsSDQoJQ0FMTF9GVU5D", "EAwSEQoNUFVTSF9WQVJJQUJMRRANEhIKDlNUT1JFX1ZBUklBQkxFEA4SCAoE", "U1RPUBAPEgwKCFJVTl9OT0RFEBAiVwoHT3BlcmFuZBIWCgxzdHJpbmdfdmFs", "dWUYASABKAlIABIUCgpib29sX3ZhbHVlGAIgASgISAASFQoLZmxvYXRfdmFs", "dWUYAyABKAJIAEIHCgV2YWx1ZWIGcHJvdG8z"));
    _descriptor = ReflectionFileDescriptor.fromGeneratedCode(descriptorData, List<FileDescriptor>(), GeneratedClrTypeInfo(null, null, List<GeneratedClrTypeInfo>()));
  }
}
class Program implements ProtobufIMessage<Program> {
  static final MessageParser<Program> _parser = MessageParser<Program>(() => Program());
  UnknownFieldSet _unknownFields;
  static MessageParser<Program> get parser {
    return _parser;
  }


  static MessageDescriptor get descriptor {
    return globalYarn.YarnSpinnerReflection.descriptor.MessageTypes[0];
  }


  MessageDescriptor get _descriptor {
    return descriptor;
  }


  Program() {
    _onConstruction();
  }

  void _onConstruction();

  Program(Program other) {
    _name_ = other._name_;
    _nodes_ = other._nodes_.clone();
    _initialValues_ = other._initialValues_.clone();
    _unknownFields = ProtobufUnknownFieldSet.clone(other._unknownFields);
  }

  Program clone() {
    return Program(this);
  }

  /// Field number for the "name" field.
  final int NameFieldNumber = 1;
  String _name_ = "";
  String get name {
    return _name_;
  }

  set name(String value) {
    _name_ = ProtobufProtoPreconditions.checkNotNull(value, "value");
  }


  /// Field number for the "nodes" field.
  final int NodesFieldNumber = 2;
  static final Codec<> _map_nodes_codec = Codec<>(ProtobufFieldCodec.forString(10, ""), ProtobufFieldCodec.forMessage(18, globalYarn.Node.parser), 18);
  final MapField<String, Node> _nodes_ = MapField<String, Node>();
  MapField<String, Node> get nodes {
    return _nodes_;
  }


  /// Field number for the "initial_values" field.
  final int InitialValuesFieldNumber = 3;
  static final Codec<> _map_initialValues_codec = Codec<>(ProtobufFieldCodec.forString(10, ""), ProtobufFieldCodec.forMessage(18, globalYarn.Operand.parser), 26);
  final MapField<String, Operand> _initialValues_ = MapField<String, Operand>();
  MapField<String, Operand> get initialValues {
    return _initialValues_;
  }


  bool equals(Object other) {
    return equals1(other as Program);
  }

  bool equals1(Program other) {
    if (referenceEquals(other, null)) {
      return false;
    }

    if (referenceEquals(other, this)) {
      return true;
    }

    if (name != other.name) {
      return false;
    }

    if (!nodes.equals(other.nodes)) {
      return false;
    }

    if (!initialValues.equals(other.initialValues)) {
      return false;
    }

    return equals(_unknownFields, other._unknownFields);
  }

  @override
  int get hashCode {
    int hash = 1;
    if (name.length != 0) {
      hash ^= name.getHashCode();
    }

    hash ^= nodes.getHashCode();
    hash ^= initialValues.getHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.getHashCode();
    }

    return hash;
  }

  String toString() {
    return ProtobufJsonFormatter.toDiagnosticString(this);
  }

  void writeTo(CodedOutputStream output) {
    if (name.length != 0) {
      output.writeRawTag(10);
      output.writeString(name);
    }

    _nodes_.writeTo(output, _map_nodes_codec);
    _initialValues_.writeTo(output, _map_initialValues_codec);
    if (_unknownFields != null) {
      _unknownFields.writeTo(output);
    }

  }

  int calculateSize() {
    int size = 0;
    if (name.length != 0) {
      size += 1 + ProtobufCodedOutputStream.computeStringSize(name);
    }

    size += _nodes_.calculateSize(_map_nodes_codec);
    size += _initialValues_.calculateSize(_map_initialValues_codec);
    if (_unknownFields != null) {
      size += _unknownFields.calculateSize();
    }

    return size;
  }

  void mergeFrom(Program other) {
    if (other == null) {
      return;
    }

    if (other.name.length != 0) {
      name = other.name;
    }

    _nodes_.add(other._nodes_);
    _initialValues_.add(other._initialValues_);
    _unknownFields = ProtobufUnknownFieldSet.mergeFrom(_unknownFields, other._unknownFields);
  }

  void mergeFrom1(CodedInputStream input) {
    int tag = 0;
    while ((tag = input.readTag()) != 0) {
      switch (tag) {
        default: {
          _unknownFields = ProtobufUnknownFieldSet.mergeFieldFrom(_unknownFields, input);
        }
        case 10: {
          name = input.readString();
        }
        case 18: {
          _nodes_.addEntriesFrom(input, _map_nodes_codec);
        }
        case 26: {
          _initialValues_.addEntriesFrom(input, _map_initialValues_codec);
        }
      }
    }
  }
}

class Node implements ProtobufIMessage<Node> {
  static final MessageParser<Node> _parser = MessageParser<Node>(() => Node());
  UnknownFieldSet _unknownFields;
  static MessageParser<Node> get parser {
    return _parser;
  }


  static MessageDescriptor get descriptor {
    return globalYarn.YarnSpinnerReflection.descriptor.MessageTypes[1];
  }


  MessageDescriptor get _descriptor {
    return descriptor;
  }


  Node() {
    _onConstruction();
  }

  void _onConstruction();

  Node(Node other) {
    _name_ = other._name_;
    _instructions_ = other._instructions_.clone();
    _labels_ = other._labels_.clone();
    _tags_ = other._tags_.clone();
    _sourceTextStringID_ = other._sourceTextStringID_;
    _unknownFields = ProtobufUnknownFieldSet.clone(other._unknownFields);
  }

  Node clone() {
    return Node(this);
  }

  /// Field number for the "name" field.
  final int NameFieldNumber = 1;
  String _name_ = "";
  String get name {
    return _name_;
  }

  set name(String value) {
    _name_ = ProtobufProtoPreconditions.checkNotNull(value, "value");
  }


  /// Field number for the "instructions" field.
  final int InstructionsFieldNumber = 2;
  static final FieldCodec<Instruction> _repeated_instructions_codec = ProtobufFieldCodec.forMessage(18, globalYarn.Instruction.parser);
  final RepeatedField<Instruction> _instructions_ = RepeatedField<Instruction>();
  RepeatedField<Instruction> get instructions {
    return _instructions_;
  }


  /// Field number for the "labels" field.
  final int LabelsFieldNumber = 3;
  static final Codec<> _map_labels_codec = Codec<>(ProtobufFieldCodec.forString(10, ""), ProtobufFieldCodec.forInt32(16, 0), 26);
  final MapField<String, int> _labels_ = MapField<String, int>();
  MapField<String, int> get labels {
    return _labels_;
  }


  /// Field number for the "tags" field.
  final int TagsFieldNumber = 4;
  static final FieldCodec<String> _repeated_tags_codec = ProtobufFieldCodec.forString(34);
  final RepeatedField<String> _tags_ = RepeatedField<String>();
  RepeatedField<String> get tags {
    return _tags_;
  }


  /// Field number for the "sourceTextStringID" field.
  final int SourceTextStringIDFieldNumber = 5;
  String _sourceTextStringID_ = "";
  String get sourceTextStringID {
    return _sourceTextStringID_;
  }

  set sourceTextStringID(String value) {
    _sourceTextStringID_ = ProtobufProtoPreconditions.checkNotNull(value, "value");
  }


  bool equals(Object other) {
    return equals2(other as Node);
  }

  bool equals2(Node other) {
    if (referenceEquals(other, null)) {
      return false;
    }

    if (referenceEquals(other, this)) {
      return true;
    }

    if (name != other.name) {
      return false;
    }

    if (!_instructions_.equals(other._instructions_)) {
      return false;
    }

    if (!labels.equals(other.labels)) {
      return false;
    }

    if (!_tags_.equals(other._tags_)) {
      return false;
    }

    if (sourceTextStringID != other.sourceTextStringID) {
      return false;
    }

    return equals(_unknownFields, other._unknownFields);
  }

  @override
  int get hashCode {
    int hash = 1;
    if (name.length != 0) {
      hash ^= name.getHashCode();
    }

    hash ^= _instructions_.getHashCode();
    hash ^= labels.getHashCode();
    hash ^= _tags_.getHashCode();
    if (sourceTextStringID.length != 0) {
      hash ^= sourceTextStringID.getHashCode();
    }

    if (_unknownFields != null) {
      hash ^= _unknownFields.getHashCode();
    }

    return hash;
  }

  String toString() {
    return ProtobufJsonFormatter.toDiagnosticString(this);
  }

  void writeTo(CodedOutputStream output) {
    if (name.length != 0) {
      output.writeRawTag(10);
      output.writeString(name);
    }

    _instructions_.writeTo(output, _repeated_instructions_codec);
    _labels_.writeTo(output, _map_labels_codec);
    _tags_.writeTo(output, _repeated_tags_codec);
    if (sourceTextStringID.length != 0) {
      output.writeRawTag(42);
      output.writeString(sourceTextStringID);
    }

    if (_unknownFields != null) {
      _unknownFields.writeTo(output);
    }

  }

  int calculateSize() {
    int size = 0;
    if (name.length != 0) {
      size += 1 + ProtobufCodedOutputStream.computeStringSize(name);
    }

    size += _instructions_.calculateSize(_repeated_instructions_codec);
    size += _labels_.calculateSize(_map_labels_codec);
    size += _tags_.calculateSize(_repeated_tags_codec);
    if (sourceTextStringID.length != 0) {
      size += 1 + ProtobufCodedOutputStream.computeStringSize(sourceTextStringID);
    }

    if (_unknownFields != null) {
      size += _unknownFields.calculateSize();
    }

    return size;
  }

  void mergeFrom(Node other) {
    if (other == null) {
      return;
    }

    if (other.name.length != 0) {
      name = other.name;
    }

    _instructions_.add(other._instructions_);
    _labels_.add(other._labels_);
    _tags_.add(other._tags_);
    if (other.sourceTextStringID.length != 0) {
      sourceTextStringID = other.sourceTextStringID;
    }

    _unknownFields = ProtobufUnknownFieldSet.mergeFrom(_unknownFields, other._unknownFields);
  }

  void mergeFrom2(CodedInputStream input) {
    int tag = 0;
    while ((tag = input.readTag()) != 0) {
      switch (tag) {
        default: {
          _unknownFields = ProtobufUnknownFieldSet.mergeFieldFrom(_unknownFields, input);
        }
        case 10: {
          name = input.readString();
        }
        case 18: {
          _instructions_.addEntriesFrom(input, _repeated_instructions_codec);
        }
        case 26: {
          _labels_.addEntriesFrom(input, _map_labels_codec);
        }
        case 34: {
          _tags_.addEntriesFrom(input, _repeated_tags_codec);
        }
        case 42: {
          sourceTextStringID = input.readString();
        }
      }
    }
  }
}

class Instruction implements ProtobufIMessage<Instruction> {
  static final MessageParser<Instruction> _parser = MessageParser<Instruction>(() => Instruction());
  UnknownFieldSet _unknownFields;
  static MessageParser<Instruction> get parser {
    return _parser;
  }


  static MessageDescriptor get descriptor {
    return globalYarn.YarnSpinnerReflection.descriptor.MessageTypes[2];
  }


  MessageDescriptor get _descriptor {
    return descriptor;
  }


  Instruction() {
    _onConstruction();
  }

  void _onConstruction();

  Instruction(Instruction other) {
    _opcode_ = other._opcode_;
    _operands_ = other._operands_.clone();
    _unknownFields = ProtobufUnknownFieldSet.clone(other._unknownFields);
  }

  Instruction clone() {
    return Instruction(this);
  }

  /// Field number for the "opcode" field.
  final int OpcodeFieldNumber = 1;
  OpCode _opcode_ = globalYarn.Instruction.Types.OpCode.jumpTo;
  OpCode get opcode {
    return _opcode_;
  }

  set opcode(OpCode value) {
    _opcode_ = value;
  }


  /// Field number for the "operands" field.
  final int OperandsFieldNumber = 2;
  static final FieldCodec<Operand> _repeated_operands_codec = ProtobufFieldCodec.forMessage(18, globalYarn.Operand.parser);
  final RepeatedField<Operand> _operands_ = RepeatedField<Operand>();
  RepeatedField<Operand> get operands {
    return _operands_;
  }


  bool equals(Object other) {
    return equals3(other as Instruction);
  }

  bool equals3(Instruction other) {
    if (referenceEquals(other, null)) {
      return false;
    }

    if (referenceEquals(other, this)) {
      return true;
    }

    if (opcode != other.opcode) {
      return false;
    }

    if (!_operands_.equals(other._operands_)) {
      return false;
    }

    return equals(_unknownFields, other._unknownFields);
  }

  @override
  int get hashCode {
    int hash = 1;
    if (opcode != globalYarn.Instruction.Types.OpCode.jumpTo) {
      hash ^= opcode.getHashCode();
    }

    hash ^= _operands_.getHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.getHashCode();
    }

    return hash;
  }

  String toString2() {
    return ProtobufJsonFormatter.toDiagnosticString(this);
  }

  void writeTo(CodedOutputStream output) {
    if (opcode != globalYarn.Instruction.Types.OpCode.jumpTo) {
      output.writeRawTag(8);
      output.writeEnum(opcode as int);
    }

    _operands_.writeTo(output, _repeated_operands_codec);
    if (_unknownFields != null) {
      _unknownFields.writeTo(output);
    }

  }

  int calculateSize() {
    int size = 0;
    if (opcode != globalYarn.Instruction.Types.OpCode.jumpTo) {
      size += 1 + ProtobufCodedOutputStream.computeEnumSize(opcode as int);
    }

    size += _operands_.calculateSize(_repeated_operands_codec);
    if (_unknownFields != null) {
      size += _unknownFields.calculateSize();
    }

    return size;
  }

  void mergeFrom(Instruction other) {
    if (other == null) {
      return;
    }

    if (other.opcode != globalYarn.Instruction.Types.OpCode.jumpTo) {
      opcode = other.opcode;
    }

    _operands_.add(other._operands_);
    _unknownFields = ProtobufUnknownFieldSet.mergeFrom(_unknownFields, other._unknownFields);
  }

  void mergeFrom3(CodedInputStream input) {
    int tag = 0;
    while ((tag = input.readTag()) != 0) {
      switch (tag) {
        default: {
          _unknownFields = ProtobufUnknownFieldSet.mergeFieldFrom(_unknownFields, input);
        }
        case 8: {
          opcode = input.readEnum() as OpCode;
        }
        case 18: {
          _operands_.addEntriesFrom(input, _repeated_operands_codec);
        }
      }
    }
  }

  /// Container for nested types declared in the Instruction message type.
}
}
class Types {

class OpCode {
  final int value;
  final String name;
  const OpCode._(this.value, this.name);

  static const jumpTo = const OpCode._(0, 'jumpTo');
  static const jump = const OpCode._(1, 'jump');
  static const runLine = const OpCode._(2, 'runLine');
  static const runCommand = const OpCode._(3, 'runCommand');
  static const addOption = const OpCode._(4, 'addOption');
  static const showOptions = const OpCode._(5, 'showOptions');
  static const pushString = const OpCode._(6, 'pushString');
  static const pushFloat = const OpCode._(7, 'pushFloat');
  static const pushBool = const OpCode._(8, 'pushBool');
  static const pushNull = const OpCode._(9, 'pushNull');
  static const jumpIfFalse = const OpCode._(10, 'jumpIfFalse');
  static const pop = const OpCode._(11, 'pop');
  static const callFunc = const OpCode._(12, 'callFunc');
  static const pushVariable = const OpCode._(13, 'pushVariable');
  static const storeVariable = const OpCode._(14, 'storeVariable');
  static const stop = const OpCode._(15, 'stop');
  static const runNode = const OpCode._(16, 'runNode');

  static const List<OpCode> values = [
    jumpTo,
    jump,
    runLine,
    runCommand,
    addOption,
    showOptions,
    pushString,
    pushFloat,
    pushBool,
    pushNull,
    jumpIfFalse,
    pop,
    callFunc,
    pushVariable,
    storeVariable,
    stop,
    runNode,
  ];

  @override
  String toString() => 'OpCode' + '.' + name;

}

class Operand implements ProtobufIMessage<Operand> {
  static final MessageParser<Operand> _parser = MessageParser<Operand>(() => Operand());
  UnknownFieldSet _unknownFields;
  static MessageParser<Operand> get parser {
    return _parser;
  }


  static MessageDescriptor get descriptor {
    return globalYarn.YarnSpinnerReflection.descriptor.MessageTypes[3];
  }


  MessageDescriptor get _descriptor {
    return descriptor;
  }


  Operand() {
    _onConstruction();
  }

  void _onConstruction();

  Operand(Operand other) {
    switch (other.ValueCase) {
      case ValueOneofCase.stringValue: {
        stringValue = other.stringValue;
      }
      case ValueOneofCase.boolValue: {
        boolValue = other.boolValue;
      }
      case ValueOneofCase.floatValue: {
        floatValue = other.floatValue;
      }
    }

    _unknownFields = ProtobufUnknownFieldSet.clone(other._unknownFields);
  }

  Operand clone() {
    return Operand(this);
  }

  /// Field number for the "string_value" field.
  final int StringValueFieldNumber = 1;
  String get stringValue {
    return _valueCase_ == ValueOneofCase.stringValue ? _value_ as String : "";
  }

  set stringValue(String value) {
    _value_ = ProtobufProtoPreconditions.checkNotNull(value, "value");
    _valueCase_ = ValueOneofCase.stringValue;
  }


  /// Field number for the "bool_value" field.
  final int BoolValueFieldNumber = 2;
  bool get boolValue {
    return _valueCase_ == ValueOneofCase.boolValue ? _value_ as bool : false;
  }

  set boolValue(bool value) {
    _value_ = value;
    _valueCase_ = ValueOneofCase.boolValue;
  }


  /// Field number for the "float_value" field.
  final int FloatValueFieldNumber = 3;
  double get floatValue {
    return _valueCase_ == ValueOneofCase.floatValue ? _value_ as double : 0.0;
  }

  set floatValue(double value) {
    _value_ = value;
    _valueCase_ = ValueOneofCase.floatValue;
  }


  Object _value_;
  /// Enum of possible cases for the "value" oneof.
  ValueOneofCase _valueCase_ = ValueOneofCase.none;
  ValueOneofCase get valueCase {
    return _valueCase_;
  }


  void clearValue() {
    _valueCase_ = ValueOneofCase.none;
    _value_ = null;
  }

  bool equals(Object other) {
    return equals4(other as Operand);
  }

  bool equals4(Operand other) {
    if (referenceEquals(other, null)) {
      return false;
    }

    if (referenceEquals(other, this)) {
      return true;
    }

    if (stringValue != other.stringValue) {
      return false;
    }

    if (boolValue != other.boolValue) {
      return false;
    }

    if (!CollectionsProtobufEqualityComparers.BitwiseSingleEqualityComparer.equals(floatValue, other.floatValue)) {
      return false;
    }

    if (valueCase != other.valueCase) {
      return false;
    }

    return equals(_unknownFields, other._unknownFields);
  }

  @override
  int get hashCode {
    int hash = 1;
    if (_valueCase_ == ValueOneofCase.stringValue) {
      hash ^= stringValue.getHashCode();
    }

    if (_valueCase_ == ValueOneofCase.boolValue) {
      hash ^= boolValue.getHashCode();
    }

    if (_valueCase_ == ValueOneofCase.floatValue) {
      hash ^= CollectionsProtobufEqualityComparers.BitwiseSingleEqualityComparer.getHashCode(floatValue);
    }

    hash ^= _valueCase_ as int;
    if (_unknownFields != null) {
      hash ^= _unknownFields.getHashCode();
    }

    return hash;
  }

  String toString() {
    return ProtobufJsonFormatter.toDiagnosticString(this);
  }

  void writeTo(CodedOutputStream output) {
    if (_valueCase_ == ValueOneofCase.stringValue) {
      output.writeRawTag(10);
      output.writeString(stringValue);
    }

    if (_valueCase_ == ValueOneofCase.boolValue) {
      output.writeRawTag(16);
      output.writeBool(boolValue);
    }

    if (_valueCase_ == ValueOneofCase.floatValue) {
      output.writeRawTag(29);
      output.writeFloat(floatValue);
    }

    if (_unknownFields != null) {
      _unknownFields.writeTo(output);
    }

  }

  int calculateSize() {
    int size = 0;
    if (_valueCase_ == ValueOneofCase.stringValue) {
      size += 1 + ProtobufCodedOutputStream.computeStringSize(stringValue);
    }

    if (_valueCase_ == ValueOneofCase.boolValue) {
      size.addListener(this, 1 + 1);
    }

    if (_valueCase_ == ValueOneofCase.floatValue) {
      size.addListener(this, 1 + 4);
    }

    if (_unknownFields != null) {
      size += _unknownFields.calculateSize();
    }

    return size;
  }

  void mergeFrom(Operand other) {
    if (other == null) {
      return;
    }

    switch (other.ValueCase) {
      case ValueOneofCase.stringValue: {
        stringValue = other.stringValue;
      }
      case ValueOneofCase.boolValue: {
        boolValue = other.boolValue;
      }
      case ValueOneofCase.floatValue: {
        floatValue = other.floatValue;
      }
    }

    _unknownFields = ProtobufUnknownFieldSet.mergeFrom(_unknownFields, other._unknownFields);
  }

  void mergeFrom4(CodedInputStream input) {
    int tag = 0;
    while ((tag = input.readTag()) != 0) {
      switch (tag) {
        default: {
          _unknownFields = ProtobufUnknownFieldSet.mergeFieldFrom(_unknownFields, input);
        }
        case 10: {
          stringValue = input.readString();
        }
        case 16: {
          boolValue = input.readBool();
        }
        case 29: {
          floatValue = input.readFloat();
        }
      }
    }
  }
}

class ValueOneofCase {
  final int value;
  final String name;
  const ValueOneofCase._(this.value, this.name);

  static const none = const ValueOneofCase._(0, 'none');
  static const stringValue = const ValueOneofCase._(1, 'stringValue');
  static const boolValue = const ValueOneofCase._(2, 'boolValue');
  static const floatValue = const ValueOneofCase._(3, 'floatValue');

  static const List<ValueOneofCase> values = [
    none,
    stringValue,
    boolValue,
    floatValue,
  ];

  @override
  String toString() => 'ValueOneofCase' + '.' + name;

}
